[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bulk Payment",
  "enabled": 1,
  "modified": "2024-02-29 11:18:06.921137",
  "module": "Khetan HR",
  "name": "Bulk Payment of Employees",
  "script": "frappe.ui.form.on('Bulk Payment', {\n    refresh(frm) {\n\t\tset_css(frm); \n\t},\n\tdepartment:function(frm){\n\t    var a = ''\n\t     frappe.call({\n    \t        method:\"bulk_payment_method\",\n    \t        args:{\"name\":cur_frm.doc.department},\n    \t        }).then(records =>{\n    \t            frm.set_value(\"company_unit\",records.company_units)\n    \t            frm.set_value(\"labour\",records.labours)\n    \t        })\n\t},\n\tget_data(frm) {\n\t    document.querySelectorAll(\"[data-fieldname = 'get_data']\")[1].style.backgroundColor = '#B0DAFF';\n\t    if(!frm.script_executed){\n\t        \n\t        var depart = frm.doc.department;\n    \t\tvar f_date = frm.doc.from_date;\n            var t_date = frm.doc.to_date;\n            var Std_Hours = frm.doc.standard_hours;\n            \n            if(cur_frm.doc.labour==1 && cur_frm.doc.company_unit == \"Unit 2\"){\n              \n               \n                frappe.db.get_list('Employee',{\n                fields:['employee','employee_name', 'daily_rate'],\n                filters:{\n                    department:depart,\n                    status:\"Active\"\n                },\n                limit:500,\n                page_length:20\n                }).then(result=>{\n                    \n                var row='';\n                for (var e in result )\n                {\n                    \n                    var emp=result[e].employee;\n                    var emp_nm=result[e].employee_name;\n                    var daily_rate=result[e].daily_rate;\n                    \n                  \n                    row = frm.add_child(\"employees\");\n                    row.employee = emp;\n                    row.employee_name = emp_nm;\n                    row.daily_rate = daily_rate;\n                    frm.refresh_field(\"employees\");\n                    \n                    //For Concatenating attendance-date and advance\n                    frappe.db.get_list(\"Card Attendance\", {\n                            filters:{\n                                advance:[\"!=\", null],\n                                attendance_date:[\"between\", [f_date, t_date]],\n                                employee:emp\n                            },\n                            fields: [\"employee_name\", \"advance\", \"attendance_date\"],\n                            order_by:'attendance_date asc'\n                    }).then(function(rec){\n                            var custom_object = {};\n                                    \n                                for (var i=0; i<rec.length; i++) \n                                {\n                                    var record = rec[i];\n                                    if(!custom_object.employee_name)\n                                    {\n                                        custom_object.employee_name=record.employee_name;\n                                    }\n                                    if(!custom_object.attendance_date)\n                                    {\n                                        custom_object.attendance_date=moment(record.attendance_date).format(\"DD-MM-YYYY\");\n                                    }\n                                    else\n                                    {\n                                        custom_object.attendance_date += \"\\n\"+moment(record.attendance_date).format(\"DD-MM-YYYY\");\n                                    }\n                                    if(!custom_object.advance)\n                                    {\n                                        custom_object.advance=record.advance;\n                                    }\n                                    else\n                                    {\n                                        custom_object.advance += \"\\n\"+record.advance;\n                                    }\n                                    if(!custom_object.final_result)\n                                    {\n                                        custom_object.final_result=moment(record.attendance_date).format(\"DD-MM-YYYY\")+\" - \"+record.advance+\" Rs\";\n                                    }\n                                    else\n                                    {\n                                        var final=moment(record.attendance_date).format(\"DD-MM-YYYY\")+\" - \"+record.advance+\" Rs\";\n                                        custom_object.final_result += \", \"+final;\n                                    }\n                                }\n                                return custom_object;\n                                        \n                    }).then(function(custom_object){\n                            var my_list=[];\n                            my_list.push(custom_object);\n                            \n                            var em_nm = my_list[0].employee_name;\n                            var at_date = my_list[0].attendance_date;\n                            var advc = my_list[0].advance;\n                                    \n                            var final_ans =my_list[0].final_result;\n                            \n                            console.log(final_ans);\n                                    \n                            var c_table=cur_frm.doc.employees;\n                                \n                            for(var k=0;k<c_table.length;k++)\n                            {\n                                var row1 = c_table[k];\n                                if(row1.employee_name==em_nm)\n                                {\n                                    row1.advance_details = final_ans;\n                                }\n                            }\n                            cur_frm.refresh_fields(\"employees\");\n                                    \n                    });\n                    \n                    \n                \n                    //For Concatenating attendance-date and advance\n                    frappe.db.get_list(\"Card Attendance\", {\n                            filters:{\n                                attendance_date:[\"between\", [f_date, t_date]],\n                                employee:emp\n                            },\n                            fields: [\"employee_name\", \"card_status\" ,\"card_working_hours\", \"attendance_date\"]\n                    }).then(function(rec){\n                            var custom_object = {};\n                                    \n                                for (var i=0; i<rec.length; i++) \n                                {\n                                    var record = rec[i];\n                                    if(!custom_object.employee_name)\n                                    {\n                                        custom_object.employee_name=record.employee_name;\n                                    }\n                                    if(!custom_object.final_result)\n                                    {\n                                        custom_object.final_result=moment(record.attendance_date).format(\"DD-MM-YYYY\")+\"        \"+record.card_status+\"      \"+Math.round(record.card_working_hours)+\" hours\";\n                                    }\n                                    else\n                                    {\n                                        var final=moment(record.attendance_date).format(\"DD-MM-YYYY\")+\"        \"+record.card_status+\"      \"+Math.round(record.card_working_hours)+\" hours\";\n                                        custom_object.final_result += \"\\n\"+final;\n                                    }\n                                }\n                                return custom_object;\n                                        \n                    }).then(function(custom_object){\n                            var my_list=[];\n                            my_list.push(custom_object);\n                            var em_nm = my_list[0].employee_name;\n                            var at_date = my_list[0].attendance_date;\n                            var advc = my_list[0].advance;\n                                    \n                            var final_ans =my_list[0].final_result;\n                            console.log(final_ans);\n                                    \n                            var c_table=cur_frm.doc.employees;\n                                \n                            for(var k=0;k<c_table.length;k++)\n                            {\n                                var row1 = c_table[k];\n                                if(row1.employee_name==em_nm)\n                                {\n                                    row1.attendance_details = final_ans;\n                                }\n                            }\n                            cur_frm.refresh_fields(\"employees\");\n                                    \n                    });\n                   \n                    //For set total working hours, payment, present-absent days\n                    frappe.call({\n                            method: \"working_hours\", \n                            args:{\n                                \"from_date\": f_date,\n                                \"to_date\": t_date,\n                                \"emp\": emp,\n                              \n                            },\n                             callback: function(r) {\n                               \n                                \n                                var ans_hour = r.message[0];\n                                var totHours = ans_hour.cardhour;\n                                var ad = ans_hour.empadvance;\n                                \n                                var em = ans_hour.employee;\n                                var presentDays = r.msgpresnt;\n                                var absentDays = r.msgabsent;\n                   \n                               \n                                \n                                var child_table=cur_frm.doc.employees;\n                                \n                                for(var i=0;i<child_table.length;i++){\n                                    if(child_table[i].employee==em){\n                                        child_table[i].total_hours=totHours;\n                                        child_table[i].advance=ad;\n            \n                                        // var standardHours = child_table[i].standard_hours;\n                                        var rate = child_table[i].daily_rate;\n                                        var hour_rate = rate/Std_Hours;\n                                        var Advance = child_table[i].advance;\n                                        var pendingPayment = child_table[i].pending_payment;\n                                        \n                                        var pay = Math.round(hour_rate*totHours);\n                                        console.log(pay);\n                                        child_table[i].payment=pay;\n                                        \n                                        child_table[i].present_days=presentDays;\n                                        child_table[i].absent_days=absentDays;\n                                        \n                                        if(Advance==null && pendingPayment==null)\n                                        {\n                                            child_table[i].total_payment=pay;\n                                        }\n                                        else if (Advance!==null && pendingPayment==null)\n                                        {\n                                            var tot_pay = pay-Advance;\n                                            child_table[i].total_payment=tot_pay;\n                                        }\n                                        else if (Advance==null && pendingPayment!==null)\n                                        {\n                                            var tot_pay1 = pay-pendingPayment;\n                                            child_table[i].total_payment=tot_pay1;\n                                            \n                                        }\n                                        else if(Advance!==null && pendingPayment!==null)\n                                        {\n                                            var tot_pay2 = pay-Advance;\n                                            var final_pay = tot_pay2-pendingPayment;\n                                            child_table[i].total_payment=final_pay;\n                                            \n                                        }\n                                       \n                                        cur_frm.refresh_fields(\"employees\");\n                                       document.querySelectorAll(\"[data-fieldname = 'get_data']\")[1].style.backgroundColor = '#0089FF';\n                                    }\n                                    \n                                }\n                                \n                             \n                             \n                            }\n                    });\n                    \n                }\n                \n            });\n            frm.script_executed=true;\n            }\n            \n           \n\t\t\n\t    }\t\n\t\t\n\t}\n});\nfunction set_css(frm){\n    console.log(\"hello\");\n\tdocument.querySelectorAll(\"[data-fieldname = 'get_data']\")[1].style.backgroundColor = '#0089FF';\n    document.querySelectorAll(\"[data-fieldname = 'get_data']\")[1].style.marginTop = '5px    ';\n\tdocument.querySelectorAll(\"[data-fieldname = 'get_data']\")[1].style.color = '#fff';\n\tdocument.querySelectorAll(\"[data-fieldname = 'get_data']\")[1].style.padding = \"9px 15px 9px 15px\";\n\t\n\t\n\t\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bulk Payment",
  "enabled": 1,
  "modified": "2024-02-29 11:18:07.005834",
  "module": "Khetan HR",
  "name": "Generate Salary slip based on Bulk Payment",
  "script": "frappe.ui.form.on('Bulk Payment', {\n\tafter_save(frm) {\n\t\t$.each(frm.doc.employees || [], function(i,d){\n        var emp = d.employee;\n        var presentDays = d.present_days;\n        var absentDays = d.absent_days;\n        var dailyRate = d.daily_rate;\n        var pay = d.payment;\n        var advance = d.advance;\n        var pendingPayment = d.pending_payment;\n        var tot_pay = d.total_payment;\n        // console.log(pendingPayment);\n        \n        if(tot_pay!==null){\n            \n            frappe.db.insert({\n                doctype: 'Salary Slip',\n                employee: emp,\n                salary_structure:'',\n                pending_amount:pendingPayment,\n                absent_days:absentDays,\n                present_days:presentDays,\n                daily_rate: dailyRate,\n                earnings:[\n                        {\n                            salary_component: 'Basic',\n                            amount: pay\n                           \n                        }\n                ],\n                deductions:[\n                        {\n                            \n                            salary_component: 'Advance',\n                            amount: advance\n                           \n                        },\n                        {\n                            salary_component: 'Other Deductions',\n                            amount: pendingPayment\n                        }\n                ],\n                \n                 \n                  \n                 \n                \n            }).then(doc => {\n                console.log(doc);\n              \n            });\n\n        }   \n        \n        \n\t\t});\n\t\t\n\t}\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bulk Payment",
  "enabled": 1,
  "modified": "2024-02-29 11:18:07.038885",
  "module": "Khetan HR",
  "name": "Bulk Payment of employees on field",
  "script": "frappe.ui.form.on('Bulk Employee Details', {\n    \n    employee:function(frm,cdt,cdn) {\n    \n    var child = locals[cdt][cdn];\n     \n    var emp = child.employee;\n    var rate = child.daily_rate;\n    var shours = child.standard_hours;\n    var hour_rate = rate/shours;\n    \n    var f_date = frm.doc.from_date;\n    var t_date = frm.doc.to_date;\n    \n    frappe.call({\n            method: \"working_hours\", \n            args:{\n                \"from_date\": f_date,\n                \"to_date\": t_date,\n                \"emp\": emp,\n                      \n            },\n            callback: function(r) {\n                               \n                                \n            var ans_hour = r.message[0];\n            var totHours = ans_hour.cardhour;\n            console.log(totHours);\n            var ad = ans_hour.empadvance;\n                                \n            var em = ans_hour.employee;\n            var presentDays = r.msgpresnt;\n            var absentDays = r.msgabsent;\n                   \n                               \n                                \n            var child_table=cur_frm.doc.employees;\n                                \n            for(var i=0;i<child_table.length;i++){\n                if(child_table[i].employee==em){\n                        child_table[i].total_hours=totHours;\n                        child_table[i].advance=ad;\n            \n                        var standardHours = child_table[i].standard_hours;\n                        var rate = child_table[i].daily_rate;\n                        var hour_rate = rate/standardHours;\n                        var Advance = child_table[i].advance;\n                        var pendingPayment = child_table[i].pending_payment;\n                                        \n                        var pay = Math.round(hour_rate*totHours);\n                        console.log(pay);\n                        child_table[i].payment=pay;\n                                        \n                        child_table[i].present_days=presentDays;\n                        child_table[i].absent_days=absentDays;\n                                        \n                        if (Advance!==null && pendingPayment==null)\n                        {\n                            var tot_pay = pay-Advance;\n                            child_table[i].total_payment=tot_pay;\n                        }\n                        else if (Advance==null && pendingPayment!==null)\n                        {\n                            var tot_pay1 = pay-pendingPayment;\n                            child_table[i].total_payment=tot_pay1;\n                                \n                        }\n                        else if(Advance!==null && pendingPayment!==null)\n                        {\n                            var tot_pay2 = pay-Advance;\n                            var final_pay = tot_pay2-pendingPayment;\n                            child_table[i].total_payment=final_pay;\n                                            \n                        }\n                        else\n                        {\n                            child_table[i].total_payment=pay;\n                                           \n                        }\n                        cur_frm.refresh_fields(\"employees\");\n                                       \n                }\n            }\n                                \n            }\n    });\n    \n    //For Concatenating attendance-date and advance\n    frappe.db.get_list(\"Card Attendance\", {\n            filters:{\n                advance:[\"!=\", null],\n                attendance_date:[\"between\", [f_date, t_date]],\n                employee:emp\n            },\n            fields: [\"employee_name\", \"advance\", \"attendance_date\"]\n            }).then(function(rec){\n                    var custom_object = {};\n                                    \n                    for (var i=0; i<rec.length; i++) \n                    {\n                        var record = rec[i];\n                        if(!custom_object.employee_name)\n                        {\n                            custom_object.employee_name=record.employee_name;\n                        }\n                        if(!custom_object.attendance_date)\n                        {\n                            custom_object.attendance_date=moment(record.attendance_date).format(\"DD-MM-YYYY\");\n                        }\n                        else\n                        {\n                            custom_object.attendance_date += \"\\n\"+moment(record.attendance_date).format(\"DD-MM-YYYY\");\n                        }\n                        if(!custom_object.advance)\n                        {\n                            custom_object.advance=record.advance;\n                        }\n                        else\n                        {\n                            custom_object.advance += \"\\n\"+record.advance;\n                        }\n                        if(!custom_object.final_result)\n                        {\n                            custom_object.final_result=moment(record.attendance_date).format(\"DD-MM-YYYY\")+\" - Rs. \"+record.advance;\n                        }\n                        else\n                        {\n                            var final=moment(record.attendance_date).format(\"DD-MM-YYYY\")+\" - Rs. \"+record.advance;\n                            custom_object.final_result += \", \"+final;\n                        }\n                    }\n                    return custom_object;\n                                        \n                    }).then(function(custom_object){\n                            var my_list=[];\n                            my_list.push(custom_object);\n                            var em_nm = my_list[0].employee_name;\n                            var at_date = my_list[0].attendance_date;\n                            var advc = my_list[0].advance;\n                                    \n                            var final_ans =my_list[0].final_result;\n                            console.log(final_ans);\n                                    \n                            var c_table=cur_frm.doc.employees;\n                                \n                            for(var k=0;k<c_table.length;k++)\n                            {\n                                var row1 = c_table[k];\n                                if(row1.employee_name==em_nm)\n                                {\n                                    row1.advance_details = final_ans;\n                                }\n                            }\n                            cur_frm.refresh_fields(\"employees\");\n                                    \n            });\n                         \n},\n   \n\ttotal_hours:function(frm,cdt,cdn) {\n\t    var child = locals[cdt][cdn];\n\t    \n\t    var tot_hours = child.total_hours;\n        var dailyRate = child.daily_rate;\n        var standardHours = child.standard_hours;\n        var hour_rate = dailyRate/standardHours;\n        var pay = Math.round(tot_hours*hour_rate);\n        var advance = child.advance;\n        var pendingPayment = child.pending_payment;\n\n        frappe.model.set_value(cdt, cdn, \"payment\", pay);\n        // frappe.model.set_value(cdt, cdn, \"total_payment\", pay);\n\t    if(child.total_hours && child.daily_rate && !child.advance && !child.pending_payment){\n\t       \n\t        frappe.model.set_value(cdt, cdn, \"total_payment\", pay);\n\t        frm.refresh_fields('employees');      \n\t    }\n\t    else{\n\t        if (advance!==null && pendingPayment==null){\n            var tot_pay = pay-advance;\n            \n            child.total_payment = tot_pay;\n            frm.refresh_fields('employees');\n        }\n        else if (advance==null && pendingPayment!==null){\n            var tot_pay1 = pay-pendingPayment;\n            \n            child.total_payment = tot_pay1;\n            frm.refresh_fields('employees');\n        }\n        else if(advance!==null && pendingPayment!==null){\n            var tot_pay2 = pay-advance;\n            var final_pay = tot_pay2-pendingPayment;\n            \n            child.total_payment = final_pay;\n            frm.refresh_fields('employees');\n        }\n\t    }\n\t  \n    },\n\tdaily_rate:function(frm,cdt,cdn) {\n\t    var child = locals[cdt][cdn];\n\t    \n\t    var tot_hours = child.total_hours;\n        var dailyRate = child.daily_rate;\n        var standardHours = child.standard_hours;\n        var hour_rate = dailyRate/standardHours;\n        var pay = Math.round(tot_hours*hour_rate);\n        var advance = child.advance;\n        var pendingPayment = child.pending_payment;\n\n        frappe.model.set_value(cdt, cdn, \"payment\", pay);\n        // frappe.model.set_value(cdt, cdn, \"total_payment\", pay);\n\t    if(child.total_hours && child.daily_rate && !child.advance && !child.pending_payment){\n\t       \n\t        frappe.model.set_value(cdt, cdn, \"total_payment\", pay);\n\t        frm.refresh_fields('employees');      \n\t    }\n\t    else{\n\t        if (advance!==null && pendingPayment==null){\n            var tot_pay = pay-advance;\n            \n            child.total_payment = tot_pay;\n            frm.refresh_fields('employees');\n        }\n        else if (advance==null && pendingPayment!==null){\n            var tot_pay1 = pay-pendingPayment;\n            \n            child.total_payment = tot_pay1;\n            frm.refresh_fields('employees');\n        }\n        else if(advance!==null && pendingPayment!==null){\n            var tot_pay2 = pay-advance;\n            var final_pay = tot_pay2-pendingPayment;\n            \n            child.total_payment = final_pay;\n            frm.refresh_fields('employees');\n        }\n\t    }\n\t   \n\t},\n\tadvance:function(frm,cdt,cdn) {\n\t   \n\t    var child = locals[cdt][cdn];\n\t    \n\t    var tot_hours = child.total_hours;\n        var dailyRate = child.daily_rate;\n        var standardHours = child.standard_hours;\n        var hour_rate = dailyRate/standardHours;\n        var pay = Math.round(tot_hours*hour_rate);\n        var advance = child.advance;\n        var pendingPayment = child.pending_payment;\n\n        frappe.model.set_value(cdt, cdn, \"payment\", pay);\n\t  \n\t    if (advance!==null && pendingPayment==null){\n            var tot_pay = pay-advance;\n            \n            child.total_payment = tot_pay;\n            frm.refresh_fields('employees');\n        }\n        else if (advance==null && pendingPayment!==null){\n            var tot_pay1 = pay-pendingPayment;\n            \n            child.total_payment = tot_pay1;\n            frm.refresh_fields('employees');\n        }\n        else if(advance!==null && pendingPayment!==null){\n            var tot_pay2 = pay-advance;\n            var final_pay = tot_pay2-pendingPayment;\n            \n            child.total_payment = final_pay;\n            frm.refresh_fields('employees');\n        }\n\t    \n\t},\n\tpending_payment:function(frm,cdt,cdn) {\n\t    var child = locals[cdt][cdn];\n\t    \n\t    var tot_hours = child.total_hours;\n        var dailyRate = child.daily_rate;\n        var standardHours = child.standard_hours;\n        var hour_rate = dailyRate/standardHours;\n        var pay = Math.round(tot_hours*hour_rate);\n        var advance = child.advance;\n        var pendingPayment = child.pending_payment;\n\n        frappe.model.set_value(cdt, cdn, \"payment\", pay);\n\t  \n\t    if (advance!==null && pendingPayment==null){\n            var tot_pay = pay-advance;\n            \n            child.total_payment = tot_pay;\n            frm.refresh_fields('employees');\n        }\n        else if (advance==null && pendingPayment!==null){\n            var tot_pay1 = pay-pendingPayment;\n            \n            child.total_payment = tot_pay1;\n            frm.refresh_fields('employees');\n        }\n        else if(advance!==null && pendingPayment!==null){\n            var tot_pay2 = pay-advance;\n            var final_pay = tot_pay2-pendingPayment;\n            \n            child.total_payment = final_pay;\n            frm.refresh_fields('employees');\n        }\n\t    \n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Card Attendance",
  "enabled": 1,
  "modified": "2024-02-29 11:18:07.073104",
  "module": "Khetan HR",
  "name": "Status Indicator for Card Attendance",
  "script": "frappe.listview_settings['Card Attendance'] = {\radd_fields: [ \"card_status\"],\rget_indicator:function(doc){\rif (doc.card_status === 'Present')\r{\r\treturn [__(\"Present\"), \"green\", \"card_status,=,Present\"];\r}\rif(doc.card_status == 'Absent')\r{\r    return [__(\"Absent\"), \"red\", \"card_status,=,Absent\"];\r}\rif(doc.card_status == 'Half Day')\r{\r    return [__(\"Half Day\"), \"orange\", \"card_status,=,Half Day\"];\r}\rif(doc.card_status == 'On Leave')\r{\r    return [__(\"On Leave\"), \"red\", \"card_status,=,On Leave\"];\r}\rif(doc.card_status == 'Work From Home')\r{\r    return [__(\"Work From Home\"), \"red\", \"card_status,=,Work From Home\"];\r}\r }\r};\r",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Salary Structure",
  "enabled": 1,
  "modified": "2024-02-29 11:18:07.107635",
  "module": "Khetan HR",
  "name": "Calculation of hour wise rate",
  "script": "frappe.ui.form.on('Salary Structure', {\n\tdaily_rate: function(frm) {\n\t\tvar Daily_rate = frm.doc.daily_rate;\n\t\tvar Hours = frm.doc.standard_hours_per_day;\n\t\tvar Hour_wise_rate = Daily_rate/Hours;\n\t\tfrm.set_value('hour_rate', Hour_wise_rate);\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Type",
  "enabled": 1,
  "modified": "2024-02-29 11:18:07.141027",
  "module": "Khetan HR",
  "name": "Calculate Shifthours",
  "script": "frappe.ui.form.on('Shift Type', {\nstart_time: function (cur_frm, cdt, cdn) {\n    var d = locals[cdt][cdn];\n    var hours=0;\n    var minutes=0;\n    var seconds=0;\n    console.log(cdt, cdn, d.start_time, d.end_time, d.shift_hours);\n\n    if (d.start_time && d.end_time) {\n        \n\t\t\n\t    var hour1 = d.start_time.split(':')[0];\n        var hour2 = d.end_time.split(':')[0];\n        var min1 = d.start_time.split(':')[1];\n        var min2 = d.end_time.split(':')[1];\n\t\tvar sec1 = d.start_time.split(':')[2];\n        var sec2 = d.end_time.split(':')[2];\n\t\t\n\t\tvar diff_hour = hour2 - hour1;\n\t\tvar diff_min = min2 - min1;\n\t\tvar diff_sec = sec2 - sec1;\n\t\t\n\t\tif (diff_hour<0) {\n            diff_hour+= 24;\n        }\n        if (diff_min<0) {\n            diff_min+=60;\n            diff_hour--;\n        }if(diff_min>=60){\n            diff_min-=60;\n            diff_hour++;\n        }\n        if (diff_sec<0) {\n            diff_sec+=60;\n            diff_min--;\n        } else if(diff_sec>=60){\n            diff_sec-=60;\n            diff_min++;\n        }\n\t\n        \n       frappe.model.set_value(cdt,cdn,\"shift_hours\",diff_hour+\":\"+diff_min+\":\"+diff_sec);\n\t   frm.refresh_field(\"shift_hours\");\n    }\n},\nend_time: function (cur_frm, cdt, cdn) {\n    var d = locals[cdt][cdn];\n    var hours=0;\n    var minutes=0;\n    var seconds=0;\n    console.log(cdt, cdn, d.start_time, d.end_time, d.shift_hours);\n\n    if (d.start_time && d.end_time) {\n        \n\t\t\n\t    var hour1 = d.start_time.split(':')[0];\n        var hour2 = d.end_time.split(':')[0];\n        var min1 = d.start_time.split(':')[1];\n        var min2 = d.end_time.split(':')[1];\n\t\tvar sec1 = d.start_time.split(':')[2];\n        var sec2 = d.end_time.split(':')[2];\n\t\t\n\t\tvar diff_hour = hour2 - hour1;\n\t\tvar diff_min = min2 - min1;\n\t\tvar diff_sec = sec2 - sec1;\n\t\t\n\t\tif (diff_hour<0) {\n            diff_hour+= 24;\n        }\n        if (diff_min<0) {\n            diff_min+=60;\n            diff_hour--;\n        }if(diff_min>=60){\n            diff_min-=60;\n            diff_hour++;\n        }\n        if (diff_sec<0) {\n            diff_sec+=60;\n            diff_min--;\n        } else if(diff_sec>=60){\n            diff_sec-=60;\n            diff_min++;\n        }\n\t\t\n      frappe.model.set_value(cdt,cdn,\"shift_hours\",diff_hour+\":\"+diff_min+\":\"+diff_sec);\n\t   frm.refresh_field(\"shift_hours\");\n    }\n}\n\n\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Salary Structure",
  "enabled": 1,
  "modified": "2024-02-29 11:18:07.175546",
  "module": "Khetan HR",
  "name": "Set Payroll type in Salary structure",
  "script": "frappe.ui.form.on('Salary Structure', {\n\tafter_save:function(frm) {\n\t\tvar pay_type = frm.doc.salary_slip_based_on_timesheet;\n\t\t\n\t\tif(pay_type == 1)\n\t\t{\n\t\t    frm.set_value('payroll_type', 'Hourwise');\n\t\t    frm.save();\n\t\t}\n\t\telse\n\t\t{\n\t\t    frm.set_value('payroll_type', 'Nothourwise');\n\t\t    frm.save();\n\t\t}\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Labour Payment Upload",
  "enabled": 1,
  "modified": "2024-02-29 11:18:07.210624",
  "module": "Khetan HR",
  "name": "Display Employee Type based on Company",
  "script": "frappe.ui.form.on('Labour Payment Upload', {\n    refresh(frm) {\n    \n\n        // Filter the Employee Type based on the selected company\n        frm.fields_dict['category'].get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    company: doc.company\n                }\n            };\n        };\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 0,
  "modified": "2024-02-29 11:18:07.239888",
  "module": "Khetan HR",
  "name": "Linked Employee ID field to Employee Number",
  "script": "frappe.ui.form.on('Employee', {\n\tprompt:function(frm) {\n\t\tvar emp = frm.doc.prompt;\n\t\t\n\t\tif(frm.doc.status == \"Active\")\n\t\t{\n\t\t    frm.set_value('employee', emp);\n\t\t    frm.set_value('employee_number', emp);\n\t\t    frm.set_value('attendance_device_id', emp);\n\t\t    frm.refresh_field('employee');\n\t\t    frm.refresh_field('employee_number');\n\t\t    frm.refresh_field('attendance_device_id');\n\t\t}\n\t\t\n\t},\n\tstatus(frm){\n\t    if(frm.doc.status == \"Inactive\")\n\t\t{\n\t\t    frm.set_value('employee_number', \"\");\n\t\t    frm.set_value('attendance_device_id', \"\");\n\t\t    frm.refresh_field('employee_number');\n\t\t    frm.refresh_field('attendance_device_id');\n\t\t}\n\t}\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2024-03-28 13:06:38.675044",
  "module": "Khetan HR",
  "name": "Show plant name as per company",
  "script": "function generateNewId(nm, count) {\n    var leftSuffix = '-Left';\n\n    // Check if nm already contains '-Left'\n    if (!nm.endsWith(leftSuffix)) {\n        nm += leftSuffix;\n    }\n\n    var newId = nm + count;\n\n    return frappe.db.exists('Employee', newId).then(function(result) {\n        if (result) {\n            // If ID exists, increment count and try again\n            return generateNewId(nm, count + 1);\n        } else {\n            // If ID doesn't exist, return the unique ID\n            return newId;\n        }\n    });\n}\n\n\n\nfrappe.ui.form.on('Employee', {\n    refresh: function(frm) {\n        var company = frm.doc.company;\n\n        if (company == \"SANTOSH UNIT 2\") {\n          \n            frm.set_df_property('plant', 'options', ['Pipe Plant', 'Tundish Plant', 'Buluster Plant']);\n        } else if (company == \"Khetan Udyog\") {\n            \n            frm.set_df_property('plant', 'options', ['Telescopic Plant']);\n        }\n    },\n    company: function(frm){\n        var company = frm.doc.company;\n\n        if (company == \"SANTOSH UNIT 2\") {\n          \n            frm.set_df_property('plant', 'options', ['Pipe Plant', 'Tundish Plant', 'Buluster Plant']);\n            \n        } else if (company == \"Khetan Udyog\") {\n            \n            frm.set_df_property('plant', 'options', ['Telescopic Plant']);\n        }\n        else{\n            frm.set_df_property('plant', 'options', ['Pipe Plant', 'Tundish Plant', 'Buluster Plant','Telescopic Plant']);\n        }\n        frm.refresh_field('plant');\n    },\n    after_save: function(frm){\n        var emp = frm.doc.employee;\n        var nm = frm.doc.name;\n        var status = frm.doc.status;\n        \n        if (status == \"Left\"){\n            \n            frappe.db.set_value('Employee',frm.doc.name,'attendance_device_id','');\n            var count = 1;\n            var new_id = generateNewId(nm,count);\n            \n            new_id.then(function(new_id){\n                console.log(new_id);\n    \n            \n            frappe.call({\n                method: 'frappe.client.rename_doc',\n                args: {\n                    doctype: 'Employee',\n                    old_name: frm.doc.name,\n                    new_name: new_id,\n                    merge: false\n                },\n                callback: function(response) {\n                    if (response.message) {\n                      \n                      frappe.warn(\n                      'Employee is Marked as Left',\n                      'Are you sure you want to redirect the page?',\n                      () => {\n                        window.location.href = \"/app/employee\";\n                      },\n                      'Continue',\n                      true // Sets dialog as minimizable\n                    );\n\n\n                    }\n                }\n            });\n            })\n            \n        }\n    }\n});\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Type",
  "enabled": 1,
  "modified": "2024-02-29 11:18:07.303311",
  "module": "Khetan HR",
  "name": "Custom Get Attendance Button in Shift Type",
  "script": "frappe.ui.form.on(\"Shift Type\", \"refresh\", function(frm) {\n    \n    // Hide Default Mark Attendance Button\n    $('[data-label=\"Mark%20Attendance\"]').hide();\n    \n    frm.add_custom_button(__(\"Get Attendance\"), function() {\n        var from_date = frm.doc.process_attendance_after;\n        var from_time = frm.doc.custom_process_attendance_from_time;\n        var to_date = frm.doc.custom_process_attendance_till_date;\n        var to_time = frm.doc.custom_process_attendance_till_time;\n        var shift = frm.doc.name;\n        var shift_type = frm.doc.custom_type;\n        var end_time = frm.doc.end_time;\n        var batchSize = 3; // Specify the number of days per batch\n\n        \n        frappe.call({\n            method: \"attendance_flow\",\n            args: {\n                \"from_date\": from_date,\n                \"to_date\": to_date,\n                \"shift\": shift,\n                \"shift_type\": shift_type,\n                \"end_time\": end_time,\n                \"from_time\": from_time,\n                \"to_time\": to_time,\n                freeze: true,\n                freeze_message: \"Please wait ..\"\n            },\n            callback: function(r) {\n                var res = r.message;\n                res.forEach(function(message) {\n                    frappe.msgprint(message);\n                });\n               \n            }\n        });\n    });\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Shift Type",
  "enabled": 1,
  "modified": "2024-02-29 11:18:07.336786",
  "module": "Khetan HR",
  "name": "Set Process Attendance To date and Time in Shift Type",
  "script": "// Set Last sync Date as after date of 'process attendance after' date with half day time after shift end\nfrappe.ui.form.on('Shift Type', {\n\tprocess_attendance_after: function(frm) {\n\t   \n\t    var type = frm.doc.custom_type\n\t    \n\t    if(type=='Night')\n\t    {\n\t        var process_after = frm.doc.process_attendance_after;\n\t        var process_till_date = frappe.datetime.add_days(process_after, 1);\n\t        var shift_hour = frm.doc.shift_hours;\n\t        var shift_end = frm.doc.end_time;\n\t        \n\t        // Get Half Day Time after Shift End\n\t        var half_day_hour = getHalfTime(shift_hour);\n\t        \n\t        // Add Half Day Time to shift end Time\n\t        const result_time = addTime(shift_end, half_day_hour);\n\t        \n\t   //     console.log(\"Process After:\", process_after);\n    // \t\tconsole.log(\"Last sync:\", process_till_date);\n    // \t\tconsole.log(\"Shift Hour:\", shift_hour);\n    // \t\tconsole.log(\"Half Day Add:\", half_day_hour);\n    //         console.log(\"Half Day Hour:\", result_time);\n\n            \n            frm.set_value('custom_process_attendance_till_date',process_till_date);\n            frm.save();\n            frm.refresh_field('custom_process_attendance_till_date');\n            \n            frm.set_value('custom_process_attendance_from_time',result_time);\n            frm.save();\n            frm.refresh_field('custom_process_attendance_from_time');\n            \n            frm.set_value('custom_process_attendance_till_time',result_time);\n            frm.save();\n            frm.refresh_field('custom_process_attendance_till_time');\n            \n    \t\n\t    }\n\t    else if(type=='Day' || type=='General')\n\t    {\n\t        var process_after = frm.doc.process_attendance_after;\n\t   \n            \n            frm.set_value('custom_process_attendance_till_date',process_after);\n            frm.save();\n            frm.refresh_field('custom_process_attendance_till_date');\n           \n\t    }\n\t    \n\t\t\n\t}\n})\n\n\n// Calculate Half hour\nfunction getHalfTime(inputTime) {\n  // Parse the input time string\n  const timeParts = inputTime.split(\":\");\n  const hours = parseInt(timeParts[0], 10);\n  const minutes = parseInt(timeParts[1], 10);\n  const seconds = parseInt(timeParts[2], 10);\n\n  // Calculate half of the total seconds\n  const totalSeconds = hours * 3600 + minutes * 60 + seconds;\n  const halfTotalSeconds = totalSeconds / 2;\n\n  // Calculate hours, minutes, and seconds for the half time\n  const halfHours = Math.floor(halfTotalSeconds / 3600);\n  const halfMinutes = Math.floor((halfTotalSeconds % 3600) / 60);\n  const halfSeconds = Math.floor(halfTotalSeconds % 60);\n\n  // Format the result into a string\n  const formattedHalfTime = `${padZero(halfHours)}:${padZero(halfMinutes)}:${padZero(halfSeconds)}`;\n\n  return formattedHalfTime;\n}\n\nfunction padZero(number) {\n  return number < 10 ? `0${number}` : `${number}`;\n}\n\n\n// Add Half time into shift start time\nfunction addTime(startTime, duration) {\n  // Parse the input time string\n  let [hours, minutes, seconds] = startTime.split(':').map(Number);\n\n  // Parse the duration string\n  let [durationHours, durationMinutes, durationSeconds] = duration.split(':').map(Number);\n\n  // Add the duration to the original time\n  hours += durationHours;\n  minutes += durationMinutes;\n  seconds += durationSeconds;\n\n  // Adjust if seconds exceed 60\n  minutes += Math.floor(seconds / 60);\n  seconds %= 60;\n\n  // Adjust if minutes exceed 60\n  hours += Math.floor(minutes / 60);\n  minutes %= 60;\n\n  // Format the result\n  const formattedResult = [\n    hours.toString().padStart(2, '0'),\n    minutes.toString().padStart(2, '0'),\n    seconds.toString().padStart(2, '0')\n  ].join(':');\n\n  return formattedResult;\n}\n",
  "view": "Form"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Additional Salary",
  "enabled": 1,
  "modified": "2024-03-27 23:41:15.793573",
  "module": "Khetan HR",
  "name": "Set Salary Component based on type",
  "script": "frappe.ui.form.on('Additional Salary', {\n\tcustom_type:function(frm) {\n\t\tvar type = frm.doc.custom_type;\n\t\t\n\t\tif(type=='Advance'){\n\t\t    \n\t\t    frappe.db.get_list('Salary Component', {\n                fields: ['name'], \n                filters: { \n                    'type':'Deduction',\n                    'component_type': 'Advance'\n                }\n            }).then(function(records) {\n                var com_nm = records[0].name;\n               \n                frm.set_value('salary_component',com_nm);\n            });\n\t\t}\n\t\telse if(type=='Penalty'){\n\t\t    frappe.db.get_list('Salary Component', {\n                fields: ['name'], \n                filters: { \n                    'type':'Deduction',\n                    'component_type': 'Penalty'\n                }\n            }).then(function(records) {\n                var com_nm = records[0].name;\n               \n                frm.set_value('salary_component',com_nm);\n            });\n\t\t}\n\t\telse if(type=='Canteen Deduction'){\n\t\t    frappe.db.get_list('Salary Component', {\n                fields: ['name'], \n                filters: { \n                    'type':'Deduction',\n                    'component_type': 'Canteen Deduction'\n                }\n            }).then(function(records) {\n                var com_nm = records[0].name;\n               \n                frm.set_value('salary_component',com_nm);\n            });\n\t\t}\n\t},\n\tcustom_coupan_qty:function(frm){\n\t    var coupan_qty = frm.doc.custom_coupan_qty\n\t    var coupan_rate = frm.doc.custom_rate_per_coupan\n\t    \n\t    if(coupan_qty && coupan_rate){\n\t        var can_ded = coupan_qty*coupan_rate\n\t        \n\t        frm.set_value('amount', can_ded);\n\t    }\n\t}\n})",
  "view": "Form"
 },
 {
  "_liked_by": "[\"Administrator\"]",
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Advance Payment",
  "enabled": 1,
  "modified": "2024-03-28 00:04:58.065264",
  "module": "Khetan HR",
  "name": "Set Installment Month in Advance Payment  SU1",
  "script": "frappe.ui.form.on('Advance Payment', {\n\tadvance_amount:function(frm) {\n\t    \n\t    var adv_amount = frm.doc.advance_amount;\n\t\tvar install_amount = frm.doc.installment_amount;\n\t\t\n\t\tif (adv_amount && install_amount){\n\t\t    \n\t\t    var install_month = adv_amount/install_amount;\n    \t\tconsole.log(adv_amount)\n    \t\t\n    \t\tfrm.set_value('installment_months', install_month);\n    \t\tfrm.refresh_field('installment_months');\n\t\t    \n\t\t}\n\t\t\n\t},\n\tinstallment_amount:function(frm) {\n\t    \n\t    var adv_amount = frm.doc.advance_amount;\n\t\tvar install_amount = frm.doc.installment_amount;\n\t\t\n\t\tif (adv_amount && install_amount){\n\t\t    \n\t\t    var install_month = adv_amount/install_amount;\n    \t\tconsole.log(adv_amount)\n    \t\t\n    \t\tfrm.set_value('installment_months', install_month);\n    \t\tfrm.refresh_field('installment_months');\n\t\t    \n\t\t}\n\t\t\n\t},\n\tinstallment_months:function(frm) {\n\t    \n\t    var adv_amount = frm.doc.advance_amount;\n\t\tvar install_month = frm.doc.installment_months;\n\t\t\n\t\tif (adv_amount && install_month){\n\t\t    \n\t\t    var install_amount = adv_amount/install_month;\n    \t\tconsole.log(install_amount)\n    \t\t\n    \t\tfrm.set_value('installment_amount', install_amount);\n    \t\tfrm.refresh_field('installment_amount');\n\t\t    \n\t\t}\n\t\t\n\t}\n})",
  "view": "Form"
 }
]