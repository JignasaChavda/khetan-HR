[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "event_frequency": "All",
  "modified": "2024-02-29 11:18:58.343988",
  "module": "Khetan HR",
  "name": "Delete Multiple logs in employee checkin",
  "reference_doctype": "Employee Checkin",
  "script": "emp_nm = str(doc.employee_name)\nHour = str(doc.hour)\nMinute = str(doc.minute)\nDate = str(doc.date)\ntime = doc.time\nshift = doc.shift\ncompany = doc.company_unit\n\n# # Update Last sync of checkin time in shift type\nif company=='Unit 1':\n    frappe.db.set_value('Shift Type', shift, 'last_sync_of_checkin', time)\nelif company=='SANTOSH UNIT 2':\n    max_datetime = frappe.db.get_value(\"Employee Checkin\", filters={'company':\"SANTOSH UNIT 2\"}, fieldname=\"max(time)\")\n    frappe.db.set_value('Shift Type', shift, 'last_sync_of_checkin', max_datetime)\n    \n\n# data = frappe.db.get_value('Shift Type', {'name': shift}, ['name', 'last_sync_of_checkin'],as_dict=1)\n# # frappe.msgprint(str(data.last_sync_of_checkin))\n    \n# frappe.db.set_value('Shift Type', shift, 'last_sync_of_checkin', time)\n\n\n\nif company=='Unit 1':\n    \n    data = frappe.db.get_list('Employee Checkin',\n        filters={\n            'employee_name': emp_nm,\n            'hour': Hour,\n            'minute': Minute,\n            'date': Date\n        },\n        fields=['name', 'hour', 'minute', 'date'],limit=1, as_list=True)\n    \n    for x in data:\n        ans = str(x[0])\n        ans_hour = str(x[1])\n        ans_minute = str(x[2])\n        ans_date = str(x[3])\n        # frappe.msgprint(ans)\n        # frappe.msgprint(str(x))\n        # frappe.msgprint(ans_minute)\n        \n        value = frappe.db.get_list('Employee Checkin', \n                filters=[\n                    ['name', 'NOT IN', ans],\n                    ['employee_name', '=', emp_nm],\n                    ['hour', '=', ans_hour],\n                    ['minute', '=', ans_minute],\n                    ['date', '=', ans_date]\n                ], as_list=True)\n        \n        for d in value:\n            new = str(d[0])\n            # frappe.msgprint(new)\n        \n            frappe.delete_doc('Employee Checkin', new)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "attendance_flow",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2024-02-29 11:18:58.318921",
  "module": "Khetan HR",
  "name": "Custom Attendance Flow via 'Get Attendance' button",
  "reference_doctype": null,
  "script": "from_date = frappe.form_dict[\"from_date\"]\nto_date = frappe.form_dict[\"to_date\"]\nshift = frappe.form_dict[\"shift\"]\nshift_type = frappe.form_dict[\"shift_type\"]\nshift_end = frappe.form_dict[\"end_time\"]\n\n\nmsg = []\nsuccess_message_printed = False\n\n  \n\n# # Get all Employee Checkin Records between selected dates  \n# checkin_records = frappe.db.get_all(\n#         \"Employee Checkin\",\n#         filters={\n#             \"shift\": shift,\n#             \"date\": [\"between\", (from_date, to_date)]\n#         },\n#         fields=[\"employee\", \"name\", \"date\", \"log_type\"],\n#         order_by=\"date\"\n#     )\n \n \n#  # Retrieve the joining dates of all employees\n# joining_dates = frappe.db.get_all(\"Employee\", filters={}, fields=[\"name\", \"date_of_joining\"])\n# joining_dict = {employee[\"name\"]: employee[\"date_of_joining\"] for employee in joining_dates}\n \n  \n# # Convert from_date to datetime.date object\n# from_date = frappe.utils.get_datetime(from_date).date()\n\n\n# Generate Attendance for Night Shift\nif shift_type == \"Night\":\n    \n    from_time = frappe.form_dict[\"from_time\"]\n    to_time = frappe.form_dict[\"to_time\"]\n    \n    if from_date and from_time:\n        from_datetime = from_date+\" \"+from_time\n    \n    if to_date and to_time:\n        to_datetime = to_date+\" \"+to_time\n\n    # Get all Employee Checkin Records between selected dates  \n    checkin_records = frappe.db.get_all(\n            \"Employee Checkin\",\n            filters={\n                \"shift\": shift,\n                \"time\": [\"between\", (from_datetime, to_datetime)]\n            },\n            fields=[\"employee\", \"name\", \"date\", \"log_type\"],\n            order_by=\"date\"\n        )\n    \n    # frappe.msgprint(f\"Checkins: {checkin_records}\") \n     \n     # Retrieve the joining dates of all employees\n    joining_dates = frappe.db.get_all(\"Employee\", filters={}, fields=[\"name\", \"date_of_joining\"])\n    joining_dict = {employee[\"name\"]: employee[\"date_of_joining\"] for employee in joining_dates}\n     \n      \n    # Convert from_date to datetime.date object\n    from_date = frappe.utils.get_datetime(from_date).date()\n    \n\n    nested_dict = {}\n    \n    # Iterate through each checkin record\n    for record in checkin_records:\n        employee_id = record[\"employee\"]\n        checkin_date = record[\"date\"]\n        log_type = record[\"log_type\"]\n        \n        # Use the joining date as the starting point if it's after from_date\n        start_date = max(joining_dict.get(employee_id, from_date), from_date)\n\n        # If the checkin date is before the starting date, skip this record\n        if checkin_date < start_date:\n            continue\n        \n        # If the employee is not in the nested dictionary, add them\n        if employee_id not in nested_dict:\n            nested_dict[employee_id] = {}\n    \n        # If the date is not in the nested dictionary for the employee, add it\n        if checkin_date not in nested_dict[employee_id]:\n            nested_dict[employee_id][checkin_date] = []\n    \n        # Add the record to the nested dictionary\n        nested_dict[employee_id][checkin_date].append({\n            \"name\": record[\"name\"],\n            \"log_type\": record[\"log_type\"]\n            \n        })\n    \n    \n    result_dict = {}\n    \n    for employee_id, date_logs in nested_dict.items():\n        result_dict[employee_id] = {}\n        for checkin_date, logs in date_logs.items():\n            result_dict[employee_id][checkin_date] = []\n    \n            first_chkin = \"\"\n            last_chkout = \"\"\n    \n            # Check if there is an IN log for night shift\n            for log in logs:\n                if log[\"log_type\"] == \"IN\" and not first_chkin:\n                    first_chkin = log[\"name\"]\n    \n            # Get the next day\n            next_day = frappe.utils.add_days(checkin_date, 1)\n            next_day_logs = nested_dict.get(employee_id, {}).get(next_day, [])\n    \n            # Check if there is an OUT log for night shift\n            for log in next_day_logs:\n                if log[\"log_type\"] == \"OUT\":\n                    last_chkout = log[\"name\"]\n    \n            # Append first check-in and last check-out to the dictionary\n            result_dict[employee_id][checkin_date].append({\n                \"first_checkin\": first_chkin,\n                \"last_checkout\": last_chkout\n            })\n\n  \n    for employee_id, date_logs in result_dict.items():\n        \n        for checkin_date, logs in date_logs.items():\n            if logs:\n                chk_in = logs[0].get('first_checkin')\n                chk_out = logs[0].get('last_checkout')\n                \n                \n                # Mark Attendance if In and OUT Both log are present\n                if chk_in and chk_out:\n                    # frappe.msgprint(f\"Before: {employee_id}\")\n                    # frappe.msgprint(f\"Before: {checkin_date}\")\n                    # frappe.msgprint(f\"Before: {chk_in}\")\n                    # frappe.msgprint(f\"Before: {chk_out}\")\n                \n                    \n                    exits_atte = frappe.db.get_value('Attendance', {'employee': employee_id,'attendance_date':checkin_date, 'docstatus':1}, ['name'])\n                    if not exits_atte:\n                    \n                        # frappe.msgprint(str(employee_id))\n                        # frappe.msgprint(str(checkin_date))\n                        # frappe.msgprint(str(chk_in))\n                        # frappe.msgprint(str(chk_out))\n                        \n                        chkin_datetime = frappe.db.get_value('Employee Checkin', chk_in, 'time')\n                        chkout_datetime = frappe.db.get_value('Employee Checkin', chk_out, 'time')\n                        \n            \n                        if chkin_datetime is not None:\n                            chkin_time = frappe.utils.get_time(chkin_datetime)\n                        \n                        if chkout_datetime is not None:\n                            chkout_time = frappe.utils.get_time(chkout_datetime)\n                    \n                        \n                        \n                        attendance = frappe.new_doc(\"Attendance\")\n                        attendance.employee = employee_id\n                        attendance.attendance_date = checkin_date\n                        attendance.shift = shift\n                        attendance.in_time = chkin_datetime\n                        attendance.out_time = chkout_datetime\n                        attendance.check_in_time = chkin_time\n                        attendance.check_out_time = chkout_time\n                        attendance.custom_employee_checkin = chk_in\n                        attendance.custom_employee_checkout = chk_out\n                        attendance.status = \"Present\"\n                        \n                        attendance.save()\n                        attendance.submit()\n                        \n                        if not success_message_printed: \n                            msg.append(\"Attendance is Marked Successfully\")\n                            success_message_printed = True\n                    else:\n                        attendance_link = frappe.utils.get_link_to_form(\"Attendance\", exits_atte)\n                        msg.append(f\"Attendance already marked of Employee:{employee_id} for date {checkin_date}: {attendance_link}\")\n                \n                elif chk_in and not chk_out:\n                    # frappe.msgprint(str(employee_id))\n                    # frappe.msgprint(str(checkin_date))\n                    # frappe.msgprint(str(chk_in))\n                    # frappe.msgprint(str(chk_out))\n                    \n                    exits_atte = frappe.db.get_value('Attendance', {'employee': employee_id,'attendance_date':checkin_date, 'docstatus':1}, ['name'])\n                    if not exits_atte:\n                        chkin_datetime = frappe.db.get_value('Employee Checkin', chk_in, 'time')\n                        \n                        if chkin_datetime is not None:\n                            chkin_time = frappe.utils.get_time(chkin_datetime)\n                            \n                        \n                            next_date = frappe.utils.add_days(checkin_date, 1)\n                            next_date_str = str(next_date)\n                            next_datetime = next_date_str+\" \"+shift_end\n                            default_chkout = frappe.utils.format_datetime(next_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                        \n                            \n                            attendance = frappe.new_doc(\"Attendance\")\n                            attendance.employee = employee_id\n                            attendance.attendance_date = checkin_date\n                            attendance.shift = shift\n                            attendance.in_time = chkin_datetime\n                            attendance.out_time = default_chkout\n                            attendance.check_in_time = chkin_time\n                            attendance.check_out_time = shift_end\n                            attendance.custom_employee_checkin = chk_in\n                            attendance.status = \"Present\"\n                            attendance.custom_remarks = \"No Out Punch\"\n                            \n                            attendance.save()\n                            attendance.submit()\n                            \n                            if not success_message_printed: \n                                msg.append(\"Attendance is Marked Successfully\")\n                                success_message_printed = True\n                        else:\n                            attendance_link = frappe.utils.get_link_to_form(\"Attendance\", exits_atte)\n                            msg.append(f\"Attendance already marked of Employee:{employee_id} for date {checkin_date}: {attendance_link}\")\n                        \n\n\n                        \nelse:\n    \n    # Get all Employee Checkin Records between selected dates  \n    checkin_records = frappe.db.get_all(\n            \"Employee Checkin\",\n            filters={\n                \"shift\": shift,\n                \"date\": [\"between\", (from_date, to_date)]\n            },\n            fields=[\"employee\", \"name\", \"date\", \"log_type\"],\n            order_by=\"date\"\n        )\n     \n     \n     # Retrieve the joining dates of all employees\n    joining_dates = frappe.db.get_all(\"Employee\", filters={}, fields=[\"name\", \"date_of_joining\"])\n    joining_dict = {employee[\"name\"]: employee[\"date_of_joining\"] for employee in joining_dates}\n     \n      \n    # Convert from_date to datetime.date object\n    from_date = frappe.utils.get_datetime(from_date).date()\n    \n    nested_dict = {}\n    \n    # Iterate through each checkin record\n    for record in checkin_records:\n        employee_id = record[\"employee\"]\n        checkin_date = record[\"date\"]\n        \n        # Use the joining date as the starting point if it's after from_date\n        start_date = max(joining_dict.get(employee_id, from_date), from_date)\n        \n        emp_type = frappe.db.get_value('Employee',employee_id,'employee_type')\n        \n        if emp_type == 'Plant Labours - SU1':\n         \n            # If the checkin date is before the starting date, skip this record\n            if checkin_date < start_date:\n                continue\n        \n            # If the employee is not in the nested dictionary, add them\n            if employee_id not in nested_dict:\n                nested_dict[employee_id] = {}\n        \n            # If the date is not in the nested dictionary for the employee, add it\n            if checkin_date not in nested_dict[employee_id]:\n                nested_dict[employee_id][checkin_date] = []\n        \n            # Add the record to the nested dictionary\n            nested_dict[employee_id][checkin_date].append({\n                \"name\": record[\"name\"],\n                \"log_type\": record[\"log_type\"]\n                \n            })\n            \n        else:\n            # If the checkin date is before the starting date, skip this record\n            if checkin_date < start_date:\n                continue\n        \n            # If the employee is not in the nested dictionary, add them\n            if employee_id not in nested_dict:\n                nested_dict[employee_id] = {}\n        \n            # If the date is not in the nested dictionary for the employee, add it\n            if checkin_date not in nested_dict[employee_id]:\n                nested_dict[employee_id][checkin_date] = []\n        \n            # Add the record to the nested dictionary\n            nested_dict[employee_id][checkin_date].append({\n                \"name\": record[\"name\"]\n                \n            })\n            \n\n    # Store the values in result dictionary and perform needed validation check\n    result_dict = {}\n\n    for employee_id, date_logs in nested_dict.items():\n        result_dict[employee_id] = {}\n        for checkin_date, logs in date_logs.items():\n            result_dict[employee_id][checkin_date] = []\n            \n            \n            first_name = None\n            last_name = None\n            \n            for log in logs:\n                name = log['name']\n                \n                if 'log_type' in log:\n                    log_type = log['log_type']\n                    \n                    \n                    if log_type == \"IN\" and first_name is None:\n                        first_name = name\n                    elif log_type == \"OUT\":\n                        last_name = name\n            \n            # If no 'log_type' found, iterate through all names\n            if not first_name and not last_name and logs:\n                if len(logs) == 1:\n                    first_name = logs[0]['name']\n                else:\n                    first_name = logs[0]['name']\n                    last_name = logs[-1]['name']\n            \n            \n            first_datetime = frappe.db.get_value('Employee Checkin', first_name, 'time')\n            last_datetime = frappe.db.get_value('Employee Checkin', last_name, 'time')\n            \n            \n            first_name_hour = first_datetime.hour\n            first_name_minute = first_datetime.minute\n            last_name_hour = last_datetime.hour\n            last_name_minute = last_datetime.minute\n            \n            if first_name_hour == last_name_hour and first_name_minute == last_name_minute:\n              \n                result_dict[employee_id][checkin_date].append({'first_chkin': first_name})\n            else:\n                result_dict[employee_id][checkin_date].append({'first_chkin': first_name, 'last_chkout': last_name})\n            \n            \n    for employee_id, date_logs in result_dict.items():\n        for checkin_date, logs in date_logs.items():\n            # frappe.msgprint(f\"Emp: {employee_id}\")\n            # frappe.msgprint(f\"Date: {checkin_date}\")\n            \n            first_in = None\n            last_out = None\n            \n            for log in logs:\n                if 'first_chkin' in log:\n                    first_in = log['first_chkin'] \n                if 'last_chkout' in log:\n                    last_out = log['last_chkout']\n                \n                # frappe.msgprint(f\"First: {first_in}\")\n                # frappe.msgprint(f\"Last: {last_out}\")\n                \n                if first_in and last_out:\n                    \n                    exits_atte = frappe.db.get_value('Attendance', {'employee': employee_id,'attendance_date':checkin_date, 'docstatus':1}, ['name'])\n                    if not exits_atte:\n                        \n                        chkin_datetime = frappe.db.get_value('Employee Checkin', first_in, 'time')\n                        chkout_datetime = frappe.db.get_value('Employee Checkin', last_out, 'time')\n                        \n                        chkin_time = frappe.utils.get_time(chkin_datetime)\n                        chkout_time = frappe.utils.get_time(chkout_datetime)\n                        \n                        attendance = frappe.new_doc(\"Attendance\")\n                        attendance.employee = employee_id\n                        attendance.attendance_date = checkin_date\n                        attendance.shift = shift\n                        attendance.in_time = chkin_datetime\n                        attendance.out_time = chkout_datetime\n                        attendance.check_in_time = chkin_time\n                        attendance.check_out_time = chkout_time\n                        attendance.custom_employee_checkin = first_in\n                        attendance.custom_employee_checkout = last_out\n                        attendance.status = \"Present\"\n                        \n                        attendance.save()\n                        attendance.submit()\n                        \n                        if not success_message_printed: \n                            msg.append(\"Attendance is Marked Successfully\")\n                            success_message_printed = True\n                    else:\n                        attendance_link = frappe.utils.get_link_to_form(\"Attendance\", exits_atte)\n                        msg.append(f\"Attendance already marked of Employee:{employee_id} for date {checkin_date}: {attendance_link}\")\n                        \n                elif first_in and not last_out:\n                    \n                    exits_atte = frappe.db.get_value('Attendance', {'employee': employee_id,'attendance_date':checkin_date, 'docstatus':1}, ['name'])\n                    if not exits_atte:\n                        \n                        chkin_datetime = frappe.db.get_value('Employee Checkin', first_in, 'time')\n                        chkin_time = frappe.utils.get_time(chkin_datetime)\n                        \n                        todaydate_str = str(checkin_date)\n                        today_datetime = todaydate_str+\" \"+shift_end\n                        default_chkout = frappe.utils.format_datetime(today_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                        \n                        attendance = frappe.new_doc(\"Attendance\")\n                        attendance.employee = employee_id\n                        attendance.attendance_date = checkin_date\n                        attendance.shift = shift\n                        attendance.in_time = chkin_datetime\n                        attendance.out_time = default_chkout\n                        attendance.check_in_time = chkin_time\n                        attendance.check_out_time = shift_end\n                        attendance.custom_employee_checkin = first_in\n                        attendance.status = \"Present\"\n                        attendance.custom_remarks = \"No Out Punch\"\n                        \n                        attendance.save()\n                        attendance.submit()\n                        \n                        if not success_message_printed: \n                            msg.append(\"Attendance is Marked Successfully\")\n                            success_message_printed = True\n                    else:\n                        attendance_link = frappe.utils.get_link_to_form(\"Attendance\", exits_atte)\n                        msg.append(f\"Attendance already marked of Employee:{employee_id} for date {checkin_date}: {attendance_link}\")\n               \n    \n\nfrappe.response[\"message\"] = msg\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2024-02-29 11:18:58.300630",
  "module": "Khetan HR",
  "name": "Auto Shift - Employee Checkin",
  "reference_doctype": "Employee Checkin",
  "script": "Name = doc.name\nemp = doc.employee\ncompany = doc.company_unit\ncheckin_time = doc.time\nemp_type = doc.employee_type\n\nTime = frappe.utils.get_datetime(checkin_time)\n\ntoday_time = frappe.utils.get_time(checkin_time)\n\ntoday_date = frappe.utils.get_date_str(checkin_time)\ntoday_date_notstr = Time.date()\ntoday = str(today_date_notstr)\n\nyesterday_Date = frappe.utils.add_days(today_date, -1)\nyesterday_Date_str = str(yesterday_Date)\n\nans1 = frappe.utils.get_datetime(yesterday_Date)\nans2 = ans1.date()\nans3 = str(ans2)\n\ntomorrow_date = frappe.utils.add_days(today_date, 1)\ntomorrow_date_str = str(tomorrow_date)\n\n\n\nans = doc.time\nHour = ans[11]+ans[12]\nMinute = ans[14]+ans[15]\n    \nans_time = frappe.utils.get_time_str(ans)\nans_hour = frappe.utils.format_time(ans_time,'H')\nans_minutes = frappe.utils.format_time(ans_time,'m')\n    \nif ans:\n    ans_date = frappe.utils.get_date_str(ans)\n    doc.date = ans_date\n        \n    doc.hour = ans_hour\n    doc.minute = ans_minutes\n    \n    \n    \n\n\nif company=='Unit 1':\n    \n    if emp_type == \"Office Staff - SU1\":\n      \n        #Fetch latest Shift Assignment record of employee\n        shift_assign = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n        \n        if shift_assign:\n            \n            Shift = shift_assign[0].shift_type\n            shift_values = frappe.db.get_value('Shift Type', Shift, ['name','start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time'])\n            \n            if shift_values:\n                shift_start = shift_values[1]\n                gs_start = frappe.utils.format_time(shift_start, \"HH:mm:ss\")\n                shift_end = shift_values[2]\n                gs_end = frappe.utils.format_time(shift_end, \"HH:mm:ss\")\n                \n                gs_begin = shift_values[3]\n                gs_after = shift_values[4]\n               \n                \n                gs_start_datetime = today+\" \"+gs_start\n                gs_start_formatted = frappe.utils.format_datetime(gs_start_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                gs_before_datetime = frappe.utils.add_to_date(gs_start_formatted, minutes=-gs_begin)\n                GS_Actual_Start = frappe.utils.get_datetime(gs_before_datetime)\n\n                \n                gs_end_datetime = today+\" \"+gs_end\n                gs_end_formatted = frappe.utils.format_datetime(gs_end_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                gs_after_datetime = frappe.utils.add_to_date(gs_end_formatted, minutes=gs_after)\n                GS_Actual_End = frappe.utils.get_datetime(gs_after_datetime)\n             \n                \n                doc.shift = Shift\n                doc.shift_actual_start = GS_Actual_Start\n                doc.shift_actual_end = GS_Actual_End\n              \n\n\n    # if emp_type == \"Plant Staff - SU1\":\n    #     #Fetch latest Shift Assignment record of employee\n    #     shift_assign = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n        \n    #     if shift_assign:\n            \n    #         Shift = shift_assign[0].shift_type\n    #         shift_values = frappe.db.get_value('Shift Type', Shift, ['name','start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time'])\n            \n    #         if shift_values:\n    #             shift_start = shift_values[1]\n    #             ds_start = frappe.utils.format_time(shift_start, \"HH:mm:ss\")\n    #             shift_end = shift_values[2]\n    #             ds_end = frappe.utils.format_time(shift_end, \"HH:mm:ss\")\n                \n    #             ds_begin = shift_values[3]\n    #             ds_after = shift_values[4]\n               \n                \n    #             ds_start_datetime = today+\" \"+ds_start\n    #             ds_start_formatted = frappe.utils.format_datetime(ds_start_datetime,\"YYYY-MM-dd HH:mm:ss\")\n    #             ds_before_datetime = frappe.utils.add_to_date(ds_start_formatted, minutes=-ds_begin)\n    #             DS_Actual_Start = frappe.utils.get_datetime(ds_before_datetime)\n         \n                \n    #             ds_end_datetime = today+\" \"+ds_end\n    #             ds_end_formatted = frappe.utils.format_datetime(ds_end_datetime,\"YYYY-MM-dd HH:mm:ss\")\n    #             ds_after_datetime = frappe.utils.add_to_date(ds_end_formatted, minutes=ds_after)\n    #             DS_Actual_End = frappe.utils.get_datetime(ds_after_datetime)\n            \n                \n    #             doc.shift = Shift\n    #             doc.shift_actual_start = DS_Actual_Start\n    #             doc.shift_actual_end = DS_Actual_End\n          \n    \n    \n    if emp_type == \"Plant Labours - SU1\" or emp_type == \"Plant Staff - SU1\" :\n        \n        #Fetch latest Shift Assignment record of employee\n        shift_assign_ds = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp, \"custom_type\": \"Day\"}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n        shift_assign_nis = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp, \"custom_type\": \"Night\"}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n    \n        if shift_assign_ds:\n            ds_Shift = shift_assign_ds[0].shift_type\n            ds_shift_values = frappe.db.get_value('Shift Type', ds_Shift, ['name','start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time', 'shift_hours'])\n            \n        if shift_assign_nis:\n            nis_Shift = shift_assign_nis[0].shift_type\n            nis_shift_values = frappe.db.get_value('Shift Type', nis_Shift, ['name','start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time', 'shift_hours'])\n            \n            if ds_shift_values or nis_shift_values:\n                \n                # Day Shift Fields\n                ds_start_time = ds_shift_values[1]\n                ds_start = frappe.utils.format_time(ds_start_time, \"HH:mm:ss\")\n                ds_end_time = ds_shift_values[2]\n                ds_end = frappe.utils.format_time(ds_end_time, \"HH:mm:ss\")\n                \n                ds_begin = ds_shift_values[3]\n                ds_after = ds_shift_values[4]\n                ds_hours = ds_shift_values[5]\n                \n               \n               \n                # Day Shift Actual In Time\n                ds_start_datetime = today+\" \"+ds_start\n                ds_start_formatted = frappe.utils.format_datetime(ds_start_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                ds_before_datetime = frappe.utils.add_to_date(ds_start_formatted, minutes=-ds_begin)\n                DS_Actual_Start = frappe.utils.get_datetime(ds_before_datetime)\n         \n                # Day Shift Actual Out Time\n                ds_end_datetime = today+\" \"+ds_end\n                ds_end_formatted = frappe.utils.format_datetime(ds_end_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                ds_after_datetime = frappe.utils.add_to_date(ds_end_formatted, minutes=ds_after)\n                DS_Actual_End = frappe.utils.get_datetime(ds_after_datetime)\n                \n                #Half Day Time\n                ds_half = ds_hours/2\n                if ds_half:\n                    parsed_day_time = frappe.utils.get_time(ds_half)\n                    day_half_hour = parsed_day_time.hour\n                    day_half_datetime = frappe.utils.add_to_date(ds_start_formatted, hours=day_half_hour)\n                    Allow_Chkin_Day_Half = frappe.utils.get_datetime(day_half_datetime)\n                    \n                    \n                    \n                    \n                    \n                # Night Shift Fields\n                nis_start_time = nis_shift_values[1]\n                nis_start = frappe.utils.format_time(nis_start_time, \"HH:mm:ss\")\n                nis_end_time = nis_shift_values[2]\n                nis_end = frappe.utils.format_time(nis_end_time, \"HH:mm:ss\")\n                \n                nis_begin = nis_shift_values[3]\n                nis_after = nis_shift_values[4]\n                nis_hours = nis_shift_values[5]\n                \n                # Night Shift - Actual Start Time and Actual End Time\n                night_start_today = today+\" \"+nis_start\n                night_start_today_formated = frappe.utils.format_datetime(night_start_today,\"YYYY-MM-dd HH:mm:ss\")\n                night_start_today_1 = frappe.utils.add_to_date(night_start_today_formated, minutes=-nis_begin)\n                Actual_Night_Start_Today = frappe.utils.get_datetime(night_start_today_1)\n               \n                \n                night_end_tomorrow = tomorrow_date+\" \"+nis_end\n                night_end_tomorrow_formated = frappe.utils.format_datetime(night_end_tomorrow,\"YYYY-MM-dd HH:mm:ss\")\n                night_end_tomorrow_1 = frappe.utils.add_to_date(night_end_tomorrow_formated, minutes=nis_after)\n                Actual_Night_End_Tomorrow = frappe.utils.get_datetime(night_end_tomorrow_1)\n                \n                \n                night_start_yesterday = yesterday_Date+\" \"+nis_start\n                night_start_yesterday_formated = frappe.utils.format_datetime(night_start_yesterday,\"YYYY-MM-dd HH:mm:ss\")\n                night_start_yesterday_1 = frappe.utils.add_to_date(night_start_yesterday_formated, minutes=-nis_begin)\n                Actual_Night_Start_Yesterday = frappe.utils.get_datetime(night_start_yesterday_1)\n                \n                 \n                night_end_today = today+\" \"+nis_end\n                night_end_today_formated = frappe.utils.format_datetime(night_end_today,\"YYYY-MM-dd HH:mm:ss\")\n                night_end_today_1 = frappe.utils.add_to_date(night_end_today_formated, minutes=nis_after)\n                Actual_Night_End_Today = frappe.utils.get_datetime(night_end_today_1)\n            \n                \n                \n                day_record_in = frappe.db.get_value(\n                    \"Employee Checkin\",\n                    filters={\"employee\": emp, \"date\": today_date, \"shift\": ds_Shift, 'log_type': \"IN\"},\n                    fieldname=['name', 'shift'],\n                    order_by=\"creation DESC\",\n                )\n                day_record_out = frappe.db.get_value(\n                    \"Employee Checkin\",\n                    filters={\"employee\": emp, \"date\": today_date, \"shift\": ds_Shift, 'log_type': \"OUT\"},\n                    fieldname=['name', 'shift'],\n                    order_by=\"creation DESC\",\n                ) # Change day_record_out on 30-01-24\n                \n                night_record_yesterday_in = frappe.db.get_value(\n                    \"Employee Checkin\",\n                    filters={\"employee\": emp, \"date\": yesterday_Date, \"shift\": nis_Shift, 'log_type': \"IN\"},\n                    fieldname=['name','shift', 'shift_actual_end'],\n                    order_by=\"creation DESC\", \n                )\n                \n                night_record_today_out = frappe.db.get_value(\n                    \"Employee Checkin\",\n                    filters={\"employee\": emp, \"date\": today_date, \"shift\": nis_Shift, 'log_type': \"OUT\"},\n                    fieldname=['name','shift'],\n                    order_by=\"creation DESC\",  \n                )\n                \n              \n                    \n                if DS_Actual_Start <= Time < Allow_Chkin_Day_Half and night_record_yesterday_in is None and not day_record_out: # Change not day_record_out on 30-01-24\n                    doc.shift = ds_Shift\n                    doc.log_type = \"IN\"\n                    doc.shift_actual_start = DS_Actual_Start\n                    doc.shift_actual_end = DS_Actual_End\n                    frappe.msgprint('DS - IN')\n                    \n                if day_record_in and not day_record_out: # Change not day_record_out on 30-01-24\n                    doc.shift = ds_Shift\n                    doc.log_type = \"OUT\"\n                    doc.shift_actual_start = DS_Actual_Start\n                    doc.shift_actual_end = DS_Actual_End\n                    frappe.msgprint('DS - OUT')\n              \n             \n                if Actual_Night_Start_Today <= Time and day_record_in is None:\n                    doc.shift = nis_Shift\n                    doc.log_type = \"IN\"\n                    doc.shift_actual_start = Actual_Night_Start_Today\n                    doc.shift_actual_end = Actual_Night_End_Tomorrow\n                    frappe.msgprint('NIS - IN')\n                    \n                if night_record_yesterday_in and night_record_today_out is None:\n                    \n                    actual_end =night_record_yesterday_in[2]\n                    frappe.msgprint(str(actual_end))\n                    if Time < actual_end:\n                        \n                        doc.shift = nis_Shift\n                        doc.log_type = \"OUT\"\n                        doc.shift_actual_start = Actual_Night_Start_Yesterday\n                        doc.shift_actual_end = Actual_Night_End_Today\n                     \n                        \n                        frappe.msgprint(\"NIS - OUT\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2024-02-29 11:18:58.289493",
  "module": "Khetan HR",
  "name": "Set Hour and Minutes in Custom field",
  "reference_doctype": "Employee Checkin",
  "script": "emp_nm = doc.employee_name\nCompany = doc.company_unit\n\n\nans = doc.time\nHour = ans[11]+ans[12]\nMinute = ans[14]+ans[15]\n    \nans_time = frappe.utils.get_time_str(ans)\nans_hour = frappe.utils.format_time(ans_time,'H')\nans_minutes = frappe.utils.format_time(ans_time,'m')\n    \nif ans:\n    ans_date = frappe.utils.get_date_str(ans)\n    doc.date = ans_date\n        \n    doc.hour = ans_hour\n    doc.minute = ans_minutes\n    \n    \n    # frappe.msgprint(ans_hour)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-02-29 11:18:58.274873",
  "module": "Khetan HR",
  "name": "Split Time and Calculate Overtime",
  "reference_doctype": "Attendance",
  "script": "in_time = str(doc.in_time)\nout_time = str(doc.out_time)\nshift_name = doc.shift\nattendance_name = doc.name\ncompany = doc.company\n\n\n# Fetch shift hours\nshift_Hour = frappe.db.get_value('Shift Type', shift_name, ['shift_hours'])\nshift_start = frappe.db.get_value('Shift Type', shift_name, ['start_time'])\nshift_end = frappe.db.get_value('Shift Type', shift_name, ['end_time'])\nhalf_day_hour = frappe.db.get_value('Shift Type', shift_name, ['working_hours_threshold_for_half_day'])\nlate_entry_grace = frappe.db.get_value('Shift Type', shift_name, ['late_entry_grace_period'])\nearly_exit_grace = frappe.db.get_value('Shift Type', shift_name, ['early_exit_grace_period'])\n\n\n# For splitting time from in_time and out_time\ntry:\n    new_in_date=in_time.split(\" \")[0:][0]\n    new_in_time=in_time.split(\" \")[1:][0]\nexcept IndexError:\n    new_in_date = ''\n    new_in_time = ''\n    \n  \n    \ntry:\n    new_out_date=in_time.split(\" \")[0:][0]\n    new_out_time=out_time.split(\" \")[1:][0]\nexcept IndexError:\n    new_out_date\n    new_out_time = ''\n    \nfrappe.db.set_value('Attendance', doc.name, 'check_in_time', new_in_time);\nfrappe.db.set_value('Attendance', doc.name, 'check_out_time', new_out_time);\n\n\n# Overtime Calculation\nif new_in_time and new_out_time:\n\n    Tot_dur = frappe.utils.time_diff(new_out_time, new_in_time)\n    \n    \n    # Overtime for Day Shift\n    if ',' not in str(Tot_dur):\n\n        Tot_dur_formatted = frappe.utils.format_time(Tot_dur,'H.m')\n        frappe.db.set_value('Attendance', attendance_name, 'custom_total_hours', Tot_dur_formatted)\n        \n        \n        # Update Half Day Status\n        if Tot_dur_formatted and float(Tot_dur_formatted) < half_day_hour :\n            frappe.db.set_value('Attendance', attendance_name, 'status', 'Half Day')\n        else:\n            frappe.db.set_value('Attendance', attendance_name, 'status', 'Present')\n            \n        \n        if Tot_dur > shift_Hour:\n            OT = frappe.utils.time_diff(Tot_dur, shift_Hour)\n            OT_formatted = frappe.utils.format_time(OT,'H.m')\n            Work_dur = frappe.utils.format_time(shift_Hour,'H.m')\n            \n            frappe.db.set_value('Attendance', attendance_name, 'overtime', OT_formatted)\n            frappe.db.set_value('Attendance', attendance_name, 'new_hours', Work_dur)\n      \n        else:\n            frappe.db.set_value('Attendance', attendance_name, 'overtime', \"00.00\")\n            frappe.db.set_value('Attendance', attendance_name, 'new_hours', Tot_dur_formatted)\n    \n    else:\n        Tot_dur_str = str(Tot_dur).split(\", \")[1]\n        Tot_dur_time = frappe.utils.get_time(Tot_dur_str)\n        shift_Hour_time = frappe.utils.get_time(shift_Hour)\n        \n        Tot_dur_formatted = frappe.utils.format_time(Tot_dur_str,'H.m')\n        frappe.db.set_value('Attendance', attendance_name, 'custom_total_hours', Tot_dur_formatted)\n        \n        \n        # Update Half Day Status\n        if Tot_dur_formatted and float(Tot_dur_formatted) < half_day_hour :\n            frappe.db.set_value('Attendance', attendance_name, 'status', 'Half Day')\n        else:\n            frappe.db.set_value('Attendance', attendance_name, 'status', 'Present')\n        \n        \n        if Tot_dur_time > shift_Hour_time:\n            \n            OT = frappe.utils.time_diff(Tot_dur_str, shift_Hour)\n            OT_formatted = frappe.utils.format_time(OT,'H.m')\n            Work_dur = frappe.utils.format_time(shift_Hour,'H.m')\n            \n            frappe.db.set_value('Attendance', attendance_name, 'overtime', OT_formatted)\n            frappe.db.set_value('Attendance', attendance_name, 'new_hours', Work_dur)\n            \n            \n        else:\n            frappe.db.set_value('Attendance', attendance_name, 'overtime', \"00.00\")\n            frappe.db.set_value('Attendance', attendance_name, 'new_hours', Tot_dur_formatted)\n    \n    \n    \n    # Late Entry calculation\n    start_datetime = new_in_date+\" \"+str(shift_start)\n    start_datetime_formatted = frappe.utils.format_datetime(start_datetime,\"YYYY-MM-dd HH:mm:ss\")\n    late_in_datetime = frappe.utils.add_to_date(start_datetime_formatted, minutes=late_entry_grace)\n    late_in_time = frappe.utils.get_time(late_in_datetime)\n    \n    \n    new_in = frappe.utils.get_time(new_in_time)\n  \n    \n    if new_in > late_in_time:\n    \n        late_in = frappe.utils.time_diff(new_in_time, str(late_in_time))\n        late_in_formatted = frappe.utils.format_time(late_in,'H.m')\n  \n        frappe.db.set_value('Attendance', attendance_name, 'custom_late_entry', late_in_formatted)\n        \n         \n    # Early Exit calculation\n    end_datetime = new_out_date+\" \"+str(shift_end)\n    end_datetime_formatted = frappe.utils.format_datetime(end_datetime,\"YYYY-MM-dd HH:mm:ss\")\n    early_exit_datetime = frappe.utils.add_to_date(end_datetime_formatted, minutes=-early_exit_grace)\n    early_exit_time = frappe.utils.get_time(early_exit_datetime)\n    \n    \n    new_out = frappe.utils.get_time(new_out_time)\n    \n    # frappe.msgprint(f\"Shift End: {shift_end}\")\n    # frappe.msgprint(f\"Early Exit Grace: {early_exit_time}\")\n    # frappe.msgprint(f\"Actual Out: {new_out_time}\")\n    \n    \n    if new_out < early_exit_time:\n        \n        early_exit = frappe.utils.time_diff(str(early_exit_time), new_out_time)\n        early_exit_formatted = frappe.utils.format_time(early_exit,'H.m')\n        \n        # frappe.msgprint(f\"Early Exit: {early_exit_formatted}\")\n  \n        frappe.db.set_value('Attendance', attendance_name, 'custom_late_entry', early_exit_formatted)\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "Daily",
  "modified": "2024-02-29 11:18:58.264911",
  "module": "Khetan HR",
  "name": "Process Auto Attendance",
  "reference_doctype": null,
  "script": "\"hrms.hr.doctype.shift_type.shift_type.process_auto_attendance_for_all_shifts\"",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2024-02-29 11:18:58.234092",
  "module": "Khetan HR",
  "name": "Update Attendance Record for auto shift detection checkin",
  "reference_doctype": "Attendance",
  "script": "emp = doc.employee\nemp_type = doc.employee_type\ncompany = doc.company\nat_date = doc.attendance_date\nShift = doc.shift\nchk_in = doc.in_time\nchk_out = doc.out_time\nwork_hours = doc.new_hours\n\nif chk_in:\n    \n    in_date = frappe.utils.get_date_str(chk_in)\n    in_time_str = frappe.utils.get_time(chk_in)\n    tomorrow_date = frappe.utils.add_days(in_date, 1)\n  \nif chk_out:\n\n    out_date = frappe.utils.get_date_str(chk_out)\n    out_time_str = frappe.utils.get_time(chk_out)\n    yesterday_Date = frappe.utils.add_days(out_date, -1)\n    \nif doc.is_new():\n    \n    # For SANTOSH UNIT 1\n    if company == \"SANTOSH UNIT 1\":\n        if emp_type == \"Plant Labours - SU1\":\n            \n            shift_type = frappe.db.get_value('Shift Type', Shift, 'custom_type')\n  \n            if shift_type == \"Day\":\n                \n                # Condition: If Check-In Time exists and Check-Out Time, Work Hours doesn't exists in attendance record\n                if chk_in and not chk_out and not work_hours:\n                    \n                    checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                    # frappe.msgprint(str(checkin_log))\n                    if checkin_log:\n                        first_checkin_name = checkin_log[0][0]\n                        first_checkin_time = checkin_log[0][1]\n                        first_checkin_shift = checkin_log[0][2]\n                        doc.in_time = first_checkin_time\n                        \n                    checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                    if checkout_log:\n                        last_checkout_name = checkout_log[-1][0]\n                        last_checkout_time = checkout_log[-1][1]\n                        doc.out_time = last_checkout_time\n                        \n                    else:\n                        \n                        last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                        last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                        first_checkin_time = doc.in_time\n                        WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                        WorkHours_Str = str(WorkHours)\n                      \n                        if ' ' in WorkHours_Str:\n                            Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                            final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                            doc.new_hours = final_wh_new\n                            doc.custom_remarks = \"No OutPunch\"\n      \n                  \n\n                # Condition: If Check-In Time exists and Check-Out Time, Work Hours doesn't exists in attendance record\n                elif chk_out and not chk_in and not work_hours:\n                    \n                    # doc.custom_test = \"Hello\"\n                    checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\", \"shift\"], as_list=True)\n                    if checkout_log:\n                        last_checkout_name = checkout_log[-1][0]\n                        last_checkout_time = checkout_log[-1][1]\n                        last_checkout_shift = checkout_log[-1][2]\n                        doc.out_time = last_checkout_time\n                        \n                    checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                    if checkin_log:\n                        first_checkin_name = checkin_log[0][0]\n                        first_checkin_time = checkin_log[0][1]\n                        doc.in_time = first_checkin_time\n        \n                    else:\n                        first_chkin = frappe.db.get_value('Shift Type', Shift, 'start_time')\n                        first_chkin_time = frappe.utils.get_time_str(first_chkin)\n                        last_checkout_time = doc.out_time\n                        WorkHours = frappe.utils.time_diff(last_checkout_time, first_chkin_time)\n                        WorkHours_Str = str(WorkHours)\n                      \n                        if ' ' in WorkHours_Str:\n                            Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                            final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                            doc.new_hours = final_wh_new\n                            doc.custom_remarks = \"No OutPunch\"\n                \n                \n                # Condition: If Check-In Time and Check-Out Time exists\n                elif chk_in and chk_out:\n\n                    # Condition: If Attendance Date and Check-In Date or Check-Out Date are not same\n                    if at_date != in_date or at_date != out_date and doc.custom_type == \"Day\":\n                        checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                        if checkin_log:\n                            first_checkin_name = checkin_log[0][0]\n                            first_checkin_time = checkin_log[0][1]\n                            first_checkin_shift = checkin_log[0][2]\n                            doc.in_time = first_checkin_time\n                            \n                        checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                        if checkout_log:\n                            last_checkout_name = checkout_log[-1][0]\n                            last_checkout_time = checkout_log[-1][1]\n                            doc.out_time = last_checkout_time\n                            \n                        else:\n                            \n                            last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                            last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                            first_checkin_time = doc.in_time\n                            WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                            WorkHours_Str = str(WorkHours)\n                          \n                            if ' ' in WorkHours_Str:\n                                Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                                final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                                doc.new_hours = final_wh_new\n                                doc.custom_remarks = \"No OutPunch\"\n                  \n                  \n                    # Condition: If Attendance Date and Check-In Date and Check-Out Date are same                \n                    elif at_date == in_date and at_date == out_date:\n                        \n                        # Condition: If Check-In and Check-Out Time are same in particular date\n                        if in_time_str == out_time_str:\n                            # Count how many records are exists in emp checkin in a particular date\n                            checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                            if checkin_log:\n                                first_checkin_name = checkin_log[0][0]\n                                first_checkin_time = checkin_log[0][1]\n                                first_checkin_shift = checkin_log[0][2]\n                                doc.in_time = first_checkin_time\n                                \n                            checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                            if checkout_log:\n                                last_checkout_name = checkout_log[-1][0]\n                                last_checkout_time = checkout_log[-1][1]\n                                doc.out_time = last_checkout_time\n                                \n                            else:\n                                \n                                last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                                last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                                first_checkin_time = doc.in_time\n                                WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                                WorkHours_Str = str(WorkHours)\n                              \n                                if ' ' in WorkHours_Str:\n                                    Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                                    final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                                    doc.new_hours = final_wh_new\n                                    doc.custom_remarks = \"No OutPunch\"\n\n            \n            \n            # For Night Shift\n            if shift_type == \"Night\":\n                \n            # Condition: If Check-In Time exists and Check-Out Time and Work Hours don't exist in the attendance record\n                if chk_in and not chk_out and not work_hours:\n                    checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": [\"between\", [at_date, tomorrow_date]], \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                    if checkin_log:\n                        first_checkin_name = checkin_log[0][0]\n                        first_checkin_time = checkin_log[0][1]\n                        first_checkin_shift = checkin_log[0][2]\n                        doc.in_time = first_checkin_time\n                                \n                    checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": [\"between\", [at_date, tomorrow_date]], \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                    if checkout_log:\n                        last_checkout_name = checkout_log[-1][0]\n                        last_checkout_time = checkout_log[-1][1]\n                        doc.out_time = last_checkout_time\n                                \n                    else:\n                        \n                        last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                        last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                        first_checkin_time = doc.in_time\n                        WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                        WorkHours_Str = str(WorkHours)\n                              \n                        if ' ' in WorkHours_Str:\n                            Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                            final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                            doc.new_hours = final_wh_new\n                            doc.custom_remarks = \"No OutPunch\"\n                            \n        elif emp_type == \"Office Staff - SU1\" or emp_type == \"Plant Staff - SU1\":\n            if chk_in and not chk_out and not work_hours:\n                checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                # frappe.msgprint(str(checkin_log))\n                if checkin_log:\n                    first_checkin_name = checkin_log[0][0]\n                    first_checkin_time = checkin_log[0][1]\n                    first_checkin_shift = checkin_log[0][2]\n                    doc.in_time = first_checkin_time\n                    \n                checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                if checkout_log:\n                    last_checkout_name = checkout_log[-1][0]\n                    last_checkout_time = checkout_log[-1][1]\n                    doc.out_time = last_checkout_time\n                    \n                else:\n                    \n                    last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                    last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                    first_checkin_time = doc.in_time\n                    WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                    WorkHours_Str = str(WorkHours)\n                  \n                    if ' ' in WorkHours_Str:\n                        Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                        final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                        doc.new_hours = final_wh_new\n                        doc.custom_remarks = \"No OutPunch\"\n            \n\n\n\n    # For SANTOSH UNIT 2\n    if company == \"SANTOSH UNIT 2\":\n        \n        shift_type = frappe.db.get_value('Shift Type', Shift, 'custom_type')\n        # frappe.msgprint(str(shift_type))\n            \n        # if doc.shift == \"Day Shift - SU2\":\n        if shift_type == \"Day\":\n                \n            # Condition: If Check-In Time exists and Check-Out Time, Work Hours doesn't exists in attendance record\n            if chk_in and not chk_out and not work_hours:\n                \n                checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                if checkin_log:\n                    first_checkin_name = checkin_log[0][0]\n                    first_checkin_time = checkin_log[0][1]\n                    first_checkin_shift = checkin_log[0][2]\n                    doc.in_time = first_checkin_time\n                    \n                checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                if checkout_log:\n                    last_checkout_name = checkout_log[-1][0]\n                    last_checkout_time = checkout_log[-1][1]\n                    doc.out_time = last_checkout_time\n                    \n                else:\n                    \n                    last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                    last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                    first_checkin_time = doc.in_time\n                    WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                    WorkHours_Str = str(WorkHours)\n                  \n                    if ' ' in WorkHours_Str:\n                        Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                        final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                        doc.new_hours = final_wh_new\n                        doc.custom_remarks = \"No OutPunch\"\n  \n              \n\n            # Condition: If Check-In Time exists and Check-Out Time, Work Hours doesn't exists in attendance record\n            elif chk_out and not chk_in and not work_hours:\n                \n                # doc.custom_test = \"Hello\"\n                checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\", \"shift\"], as_list=True)\n                if checkout_log:\n                    last_checkout_name = checkout_log[-1][0]\n                    last_checkout_time = checkout_log[-1][1]\n                    last_checkout_shift = checkout_log[-1][2]\n                    doc.out_time = last_checkout_time\n                    \n                checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                if checkin_log:\n                    first_checkin_name = checkin_log[0][0]\n                    first_checkin_time = checkin_log[0][1]\n                    doc.in_time = first_checkin_time\n    \n                else:\n                   \n                    first_chkin = frappe.db.get_value('Shift Type', Shift, 'start_time')\n                    first_chkin_time = frappe.utils.get_time_str(first_chkin)\n                    last_checkout_time = doc.out_time\n                    WorkHours = frappe.utils.time_diff(last_checkout_time, first_chkin_time)\n                    WorkHours_Str = str(WorkHours)\n                  \n                    if ' ' in WorkHours_Str:\n                        Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                        final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                        doc.new_hours = final_wh_new\n                        doc.custom_remarks = \"No OutPunch\"\n            \n            \n            # Condition: If Check-In Time and Check-Out Time exists\n            elif chk_in and chk_out:\n\n                # Condition: If Attendance Date and Check-In Date or Check-Out Date are not same\n                if at_date != in_date or at_date != out_date and doc.custom_type == \"Day\":\n                    checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                    if checkin_log:\n                        first_checkin_name = checkin_log[0][0]\n                        first_checkin_time = checkin_log[0][1]\n                        first_checkin_shift = checkin_log[0][2]\n                        doc.in_time = first_checkin_time\n                        \n                    checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                    if checkout_log:\n                        last_checkout_name = checkout_log[-1][0]\n                        last_checkout_time = checkout_log[-1][1]\n                        doc.out_time = last_checkout_time\n                        \n                    else:\n                       \n                        last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                        last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                        first_checkin_time = doc.in_time\n                        WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                        WorkHours_Str = str(WorkHours)\n                      \n                        if ' ' in WorkHours_Str:\n                            Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                            final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                            doc.new_hours = final_wh_new\n                            doc.custom_remarks = \"No OutPunch\"\n              \n              \n                # Condition: If Attendance Date and Check-In Date and Check-Out Date are same                \n                elif at_date == in_date and at_date == out_date:\n                    \n                    # Condition: If Check-In and Check-Out Time are same in particular date\n                    if in_time_str == out_time_str:\n                        # Count how many records are exists in emp checkin in a particular date\n                        checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                        if checkin_log:\n                            first_checkin_name = checkin_log[0][0]\n                            first_checkin_time = checkin_log[0][1]\n                            first_checkin_shift = checkin_log[0][2]\n                            doc.in_time = first_checkin_time\n                            \n                        checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                        if checkout_log:\n                            last_checkout_name = checkout_log[-1][0]\n                            last_checkout_time = checkout_log[-1][1]\n                            doc.out_time = last_checkout_time\n                            \n                        else:\n                            \n                            last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                            last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                            first_checkin_time = doc.in_time\n                            WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                            WorkHours_Str = str(WorkHours)\n                          \n                            if ' ' in WorkHours_Str:\n                                Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                                final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                                doc.new_hours = final_wh_new\n                                doc.custom_remarks = \"No OutPunch\"\n\n            \n            \n        # For Night Shift\n        if shift_type == \"Night\":\n            \n        # Condition: If Check-In Time exists and Check-Out Time and Work Hours don't exist in the attendance record\n            if chk_in and not chk_out and not work_hours:\n                checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": [\"between\", [at_date, tomorrow_date]], \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                if checkin_log:\n                    first_checkin_name = checkin_log[0][0]\n                    first_checkin_time = checkin_log[0][1]\n                    first_checkin_shift = checkin_log[0][2]\n                    doc.in_time = first_checkin_time\n                            \n                checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": [\"between\", [at_date, tomorrow_date]], \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                if checkout_log:\n                    last_checkout_name = checkout_log[-1][0]\n                    last_checkout_time = checkout_log[-1][1]\n                    doc.out_time = last_checkout_time\n                            \n                else:\n                   \n                    last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                    last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                    first_checkin_time = doc.in_time\n                    WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                    WorkHours_Str = str(WorkHours)\n                          \n                    if ' ' in WorkHours_Str:\n                        Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                        final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                        doc.new_hours = final_wh_new\n                        doc.custom_remarks = \"No OutPunch\"",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "bulk_payment_method",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2024-02-29 11:18:58.223560",
  "module": "Khetan HR",
  "name": "bulk_payment_method",
  "reference_doctype": null,
  "script": "bulk_department = frappe.form_dict[\"name\"]\nlabours = frappe.db.get_value('Department', bulk_department, 'labours')\ncompany_units = frappe.db.get_value('Department', bulk_department, 'company_unit')\nlabours2 = str(labours)\n\nfrappe.response[\"labours\"]=labours2\nfrappe.response[\"company_units\"]=company_units",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-02-29 11:18:58.210280",
  "module": "Khetan HR",
  "name": "Calculate Overtime in Card Attendance",
  "reference_doctype": "Card Attendance",
  "script": "workingHours = doc.card_working_hours\nstandardHours = doc.standard_working_hours\nName = doc.name;\n\n\nstandardHours_Float = float(doc.standard_working_hours)\nstandardHours_For_OT = standardHours_Float + 1\n\nif workingHours:\n    workingHours_Float = float(doc.card_working_hours)\n    workingHours_Str = str(doc.card_working_hours)\n    \n    # if working hours is integer\n    if '.' not in workingHours_Str:\n        \n        # if working hours is greater then standard hours\n        if workingHours_Float > standardHours_Float :\n            ot = workingHours_Float-standardHours_Float\n            OverTime = ot + 0.0\n            frappe.db.set_value('Card Attendance', Name, 'overtime', OverTime);\n            frappe.db.set_value('Card Attendance', Name, 'actual_working_hours', workingHours_Float);\n        else:\n            frappe.db.set_value('Card Attendance', Name, 'actual_working_hours', workingHours_Float);\n        \n    else:\n        if workingHours_Float > standardHours_Float :\n            OT = workingHours_Float - standardHours_Float\n            OT1 = str(OT)\n            OverTime1 = frappe.format(OT1, {\"fieldtype\": \"Float\", \"precision\": 2})\n            frappe.db.set_value('Card Attendance', Name, 'overtime', OverTime1);\n            \n            if workingHours_Float > standardHours_For_OT:\n                \n                # for converting hours and minutes into hours\n                hour=workingHours_Str.split(\".\")[0]\n                minute=workingHours_Str.split(\".\")[1]\n                \n                new_hour = int(hour) + (int(minute) / 60)\n                tot_Hour = round(new_hour, 1)\n                # frappe.msgprint(str(tot_Hour))\n                frappe.db.set_value('Card Attendance', Name, 'actual_working_hours', tot_Hour);\n            else:\n                hour=workingHours_Str.split(\".\")[0]\n                minute=workingHours_Str.split(\".\")[1]\n                new_hour = float(hour)+0.0\n                frappe.db.set_value('Card Attendance', Name, 'actual_working_hours', new_hour);\n        else:\n            hour=workingHours_Str.split(\".\")[0]\n            minute=workingHours_Str.split(\".\")[1]\n                \n            new_hour = int(hour) + (int(minute) / 60)\n            tot_Hour = round(new_hour, 1)\n            # frappe.msgprint(str(tot_Hour))\n            frappe.db.set_value('Card Attendance', Name, 'actual_working_hours', tot_Hour);\n        \n\n\n\n\n\n\n    \n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "working_hours",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2024-02-29 11:18:58.174057",
  "module": "Khetan HR",
  "name": "Fetch Working hours in Timesheet",
  "reference_doctype": null,
  "script": "from_date=frappe.form_dict['from_date']\nto_date=frappe.form_dict['to_date']\nemployee=frappe.form_dict['emp']\n\n\ntotHours = frappe.db.sql(f\"select sum(round(card_working_hours, 1)) as cardhour, sum(round(advance, 1)) as empadvance, employee, attendance_date from `tabCard Attendance` where employee='{ employee }' and attendance_date BETWEEN '{ from_date }' AND '{ to_date }' \",as_dict=1)\n\ncountPresent = frappe.db.sql(f\"select count(employee) as countpresent from `tabCard Attendance` where employee='{ employee }' and attendance_date BETWEEN '{ from_date }' AND '{ to_date }' and card_status='Present' \",as_dict=1)\npresentDays = countPresent[0].countpresent\n# frappe.msgprint(str(cardres))\n\ncountAbsent = frappe.db.sql(f\"select count(employee) as countabsent from `tabCard Attendance` where employee='{ employee }' and attendance_date BETWEEN '{ from_date }' AND '{ to_date }' and card_status='Absent' \",as_dict=1)\nabsentDays = countAbsent[0].countabsent\n# frappe.msgprint(str(cardres))\n\ncountHalfDay = frappe.db.sql(f\"select count(employee) as counthalfday from `tabCard Attendance` where employee='{ employee }' and attendance_date BETWEEN '{ from_date }' AND '{ to_date }' and card_status='Half Day' \",as_dict=1)\nhalfDays = countHalfDay[0].counthalfday\ntot_halfday = halfDays/2\n# frappe.msgprint(str(half_day))\n\ntot_present = presentDays+tot_halfday\n# frappe.msgprint(str(tot_present))\n\n\n\nfrappe.response['message'] = totHours;\nfrappe.response['msgpresnt'] = tot_present;\nfrappe.response['msgabsent'] = absentDays;\n",
  "script_type": "API"
 }
]