[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.541073",
  "module": "Khetan HR",
  "name": "Delete Multiple logs in employee checkin",
  "reference_doctype": "Employee Checkin",
  "script": "emp_nm = str(doc.employee_name)\nHour = str(doc.hour)\nMinute = str(doc.minute)\nDate = str(doc.date)\ntime = doc.time\nshift = doc.shift\ncompany = doc.company_unit\n\n# # Update Last sync of checkin time in shift type\nif company=='Unit 1':\n    frappe.db.set_value('Shift Type', shift, 'last_sync_of_checkin', time)\nelif company=='Unit 2':\n    max_datetime = frappe.db.get_value(\"Employee Checkin\", filters={'company':\"SANTOSH UNIT 2\"}, fieldname=\"max(time)\")\n    frappe.db.set_value('Shift Type', shift, 'last_sync_of_checkin', max_datetime)\n    \n\n# data = frappe.db.get_value('Shift Type', {'name': shift}, ['name', 'last_sync_of_checkin'],as_dict=1)\n# # frappe.msgprint(str(data.last_sync_of_checkin))\n    \n# frappe.db.set_value('Shift Type', shift, 'last_sync_of_checkin', time)\n\n\n\nif company=='Unit 1':\n    \n    data = frappe.db.get_list('Employee Checkin',\n        filters={\n            'employee_name': emp_nm,\n            'hour': Hour,\n            'minute': Minute,\n            'date': Date\n        },\n        fields=['name', 'hour', 'minute', 'date'],limit=1, as_list=True)\n    \n    for x in data:\n        ans = str(x[0])\n        ans_hour = str(x[1])\n        ans_minute = str(x[2])\n        ans_date = str(x[3])\n        # frappe.msgprint(ans)\n        # frappe.msgprint(str(x))\n        # frappe.msgprint(ans_minute)\n        \n        value = frappe.db.get_list('Employee Checkin', \n                filters=[\n                    ['name', 'NOT IN', ans],\n                    ['employee_name', '=', emp_nm],\n                    ['hour', '=', ans_hour],\n                    ['minute', '=', ans_minute],\n                    ['date', '=', ans_date]\n                ], as_list=True)\n        \n        for d in value:\n            new = str(d[0])\n            # frappe.msgprint(new)\n        \n            frappe.delete_doc('Employee Checkin', new)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "attendance_flow",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.291480",
  "module": "Khetan HR",
  "name": "Custom Attendance Flow via 'Get Attendance' button",
  "reference_doctype": null,
  "script": "from_date = frappe.form_dict[\"from_date\"]\nto_date = frappe.form_dict[\"to_date\"]\nshift = frappe.form_dict[\"shift\"]\nshift_type = frappe.form_dict[\"shift_type\"]\nshift_end = frappe.form_dict[\"end_time\"]\n\n\nmsg = []\nsuccess_message_printed = False\n\n  \n\n# Generate Attendance for Night Shift\nif shift_type == \"Night\":\n    \n    from_time = frappe.form_dict[\"from_time\"]\n    to_time = frappe.form_dict[\"to_time\"]\n    \n    if from_date and from_time:\n        from_datetime = from_date+\" \"+from_time\n    \n    if to_date and to_time:\n        to_datetime = to_date+\" \"+to_time\n\n    # Get all Employee Checkin Records between selected dates  \n    checkin_records = frappe.db.get_all(\n            \"Employee Checkin\",\n            filters={\n                \"shift\": shift,\n                \"time\": [\"between\", (from_datetime, to_datetime)]\n            },\n            fields=[\"employee\", \"name\", \"date\", \"log_type\"],\n            order_by=\"date\"\n        )\n    \n    # frappe.msgprint(f\"Checkins: {checkin_records}\") \n     \n     # Retrieve the joining dates of all employees\n    joining_dates = frappe.db.get_all(\"Employee\", filters={}, fields=[\"name\", \"date_of_joining\"])\n    joining_dict = {employee[\"name\"]: employee[\"date_of_joining\"] for employee in joining_dates}\n     \n      \n    # Convert from_date to datetime.date object\n    from_date = frappe.utils.get_datetime(from_date).date()\n    \n\n    nested_dict = {}\n    \n    # Iterate through each checkin record\n    for record in checkin_records:\n        employee_id = record[\"employee\"]\n        checkin_date = record[\"date\"]\n        log_type = record[\"log_type\"]\n        \n        # Use the joining date as the starting point if it's after from_date\n        start_date = max(joining_dict.get(employee_id, from_date), from_date)\n\n        # If the checkin date is before the starting date, skip this record\n        if checkin_date < start_date:\n            continue\n        \n        # If the employee is not in the nested dictionary, add them\n        if employee_id not in nested_dict:\n            nested_dict[employee_id] = {}\n    \n        # If the date is not in the nested dictionary for the employee, add it\n        if checkin_date not in nested_dict[employee_id]:\n            nested_dict[employee_id][checkin_date] = []\n    \n        # Add the record to the nested dictionary\n        nested_dict[employee_id][checkin_date].append({\n            \"name\": record[\"name\"],\n            \"log_type\": record[\"log_type\"]\n            \n        })\n    \n    \n    result_dict = {}\n    \n    for employee_id, date_logs in nested_dict.items():\n        result_dict[employee_id] = {}\n        for checkin_date, logs in date_logs.items():\n            result_dict[employee_id][checkin_date] = []\n    \n            first_chkin = \"\"\n            last_chkout = \"\"\n    \n            # Check if there is an IN log for night shift\n            for log in logs:\n                if log[\"log_type\"] == \"IN\" and not first_chkin:\n                    first_chkin = log[\"name\"]\n    \n            # Get the next day\n            next_day = frappe.utils.add_days(checkin_date, 1)\n            next_day_logs = nested_dict.get(employee_id, {}).get(next_day, [])\n    \n            # Check if there is an OUT log for night shift\n            for log in next_day_logs:\n                if log[\"log_type\"] == \"OUT\":\n                    last_chkout = log[\"name\"]\n    \n            # Append first check-in and last check-out to the dictionary\n            result_dict[employee_id][checkin_date].append({\n                \"first_checkin\": first_chkin,\n                \"last_checkout\": last_chkout\n            })\n\n  \n    for employee_id, date_logs in result_dict.items():\n        \n        for checkin_date, logs in date_logs.items():\n            if logs:\n                chk_in = logs[0].get('first_checkin')\n                chk_out = logs[0].get('last_checkout')\n                \n                \n                # Mark Attendance if In and OUT Both log are present\n                if chk_in and chk_out:\n                    # frappe.msgprint(f\"Before: {employee_id}\")\n                    # frappe.msgprint(f\"Before: {checkin_date}\")\n                    # frappe.msgprint(f\"Before: {chk_in}\")\n                    # frappe.msgprint(f\"Before: {chk_out}\")\n                \n                    \n                    exits_atte = frappe.db.get_value('Attendance', {'employee': employee_id,'attendance_date':checkin_date, 'docstatus':1}, ['name'])\n                    if not exits_atte:\n                    \n                        # frappe.msgprint(str(employee_id))\n                        # frappe.msgprint(str(checkin_date))\n                        # frappe.msgprint(str(chk_in))\n                        # frappe.msgprint(str(chk_out))\n                        \n                        chkin_datetime = frappe.db.get_value('Employee Checkin', chk_in, 'time')\n                        chkout_datetime = frappe.db.get_value('Employee Checkin', chk_out, 'time')\n                        \n            \n                        if chkin_datetime is not None:\n                            chkin_time = frappe.utils.get_time(chkin_datetime)\n                        \n                        if chkout_datetime is not None:\n                            chkout_time = frappe.utils.get_time(chkout_datetime)\n                    \n                        \n                        \n                        attendance = frappe.new_doc(\"Attendance\")\n                        attendance.employee = employee_id\n                        attendance.attendance_date = checkin_date\n                        attendance.shift = shift\n                        attendance.in_time = chkin_datetime\n                        attendance.out_time = chkout_datetime\n                        attendance.check_in_time = chkin_time\n                        attendance.check_out_time = chkout_time\n                        attendance.custom_employee_checkin = chk_in\n                        attendance.custom_employee_checkout = chk_out\n                        attendance.status = \"Present\"\n                        \n                        attendance.save()\n                        attendance.submit()\n                        \n                        if not success_message_printed: \n                            msg.append(\"Attendance is Marked Successfully\")\n                            success_message_printed = True\n                    else:\n                        attendance_link = frappe.utils.get_link_to_form(\"Attendance\", exits_atte)\n                        msg.append(f\"Attendance already marked of Employee:{employee_id} for date {checkin_date}: {attendance_link}\")\n                \n                elif chk_in and not chk_out:\n                    # frappe.msgprint(str(employee_id))\n                    # frappe.msgprint(str(checkin_date))\n                    # frappe.msgprint(str(chk_in))\n                    # frappe.msgprint(str(chk_out))\n                    \n                    exits_atte = frappe.db.get_value('Attendance', {'employee': employee_id,'attendance_date':checkin_date, 'docstatus':1}, ['name'])\n                    if not exits_atte:\n                        chkin_datetime = frappe.db.get_value('Employee Checkin', chk_in, 'time')\n                        \n                        if chkin_datetime is not None:\n                            chkin_time = frappe.utils.get_time(chkin_datetime)\n                            \n                        \n                            # next_date = frappe.utils.add_days(checkin_date, 1)\n                            # next_date_str = str(next_date)\n                            # next_datetime = next_date_str+\" \"+shift_end\n                            # default_chkout = frappe.utils.format_datetime(next_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                        \n                            \n                            attendance = frappe.new_doc(\"Attendance\")\n                            attendance.employee = employee_id\n                            attendance.attendance_date = checkin_date\n                            attendance.shift = shift\n                            attendance.in_time = chkin_datetime\n                            # attendance.out_time = default_chkout\n                            attendance.check_in_time = chkin_time\n                            # attendance.check_out_time = shift_end\n                            attendance.custom_employee_checkin = chk_in\n                            attendance.status = \"Present\"\n                            attendance.custom_remarks = \"No OutPunch\"\n                            \n                            attendance.save()\n                            attendance.submit()\n                            \n                            if not success_message_printed: \n                                msg.append(\"Attendance is Marked Successfully\")\n                                success_message_printed = True\n                        else:\n                            attendance_link = frappe.utils.get_link_to_form(\"Attendance\", exits_atte)\n                            msg.append(f\"Attendance already marked of Employee:{employee_id} for date {checkin_date}: {attendance_link}\")\n                        \n\n\n                        \nelse:\n    \n    # Get all Employee Checkin Records between selected dates  \n    checkin_records = frappe.db.get_all(\n            \"Employee Checkin\",\n            filters={\n                \"shift\": shift,\n                \"date\": [\"between\", (from_date, to_date)]\n            },\n            fields=[\"employee\", \"name\", \"date\", \"log_type\"],\n            order_by=\"date\"\n        )\n     \n     \n     # Retrieve the joining dates of all employees\n    joining_dates = frappe.db.get_all(\"Employee\", filters={}, fields=[\"name\", \"date_of_joining\"])\n    joining_dict = {employee[\"name\"]: employee[\"date_of_joining\"] for employee in joining_dates}\n     \n      \n    # Convert from_date to datetime.date object\n    from_date = frappe.utils.get_datetime(from_date).date()\n    \n    nested_dict = {}\n    \n    # Iterate through each checkin record\n    for record in checkin_records:\n        employee_id = record[\"employee\"]\n        checkin_date = record[\"date\"]\n        \n        # Use the joining date as the starting point if it's after from_date\n        start_date = max(joining_dict.get(employee_id, from_date), from_date)\n        \n        emp_type = frappe.db.get_value('Employee',employee_id,'employee_type')\n        \n        if emp_type == 'Plant Labours - SU1':\n         \n            # If the checkin date is before the starting date, skip this record\n            if checkin_date < start_date:\n                continue\n        \n            # If the employee is not in the nested dictionary, add them\n            if employee_id not in nested_dict:\n                nested_dict[employee_id] = {}\n        \n            # If the date is not in the nested dictionary for the employee, add it\n            if checkin_date not in nested_dict[employee_id]:\n                nested_dict[employee_id][checkin_date] = []\n        \n            # Add the record to the nested dictionary\n            nested_dict[employee_id][checkin_date].append({\n                \"name\": record[\"name\"],\n                \"log_type\": record[\"log_type\"]\n                \n            })\n            \n        else:\n            # If the checkin date is before the starting date, skip this record\n            if checkin_date < start_date:\n                continue\n        \n            # If the employee is not in the nested dictionary, add them\n            if employee_id not in nested_dict:\n                nested_dict[employee_id] = {}\n        \n            # If the date is not in the nested dictionary for the employee, add it\n            if checkin_date not in nested_dict[employee_id]:\n                nested_dict[employee_id][checkin_date] = []\n        \n            # Add the record to the nested dictionary\n            nested_dict[employee_id][checkin_date].append({\n                \"name\": record[\"name\"]\n                \n            })\n            \n\n    # Store the values in result dictionary and perform needed validation check\n    result_dict = {}\n\n    for employee_id, date_logs in nested_dict.items():\n        result_dict[employee_id] = {}\n        for checkin_date, logs in date_logs.items():\n            result_dict[employee_id][checkin_date] = []\n            \n            \n            first_name = None\n            last_name = None\n            \n            for log in logs:\n                name = log['name']\n                \n                if 'log_type' in log:\n                    log_type = log['log_type']\n                    \n                    \n                    if log_type == \"IN\" and first_name is None:\n                        first_name = name\n                    elif log_type == \"OUT\":\n                        last_name = name\n            \n            # If no 'log_type' found, iterate through all names\n            if not first_name and not last_name and logs:\n                if len(logs) == 1:\n                    first_name = logs[0]['name']\n                else:\n                    first_name = logs[0]['name']\n                    last_name = logs[-1]['name']\n            \n            \n            first_datetime = frappe.db.get_value('Employee Checkin', first_name, 'time')\n            last_datetime = frappe.db.get_value('Employee Checkin', last_name, 'time')\n            \n            \n            first_name_hour = first_datetime.hour\n            first_name_minute = first_datetime.minute\n            last_name_hour = last_datetime.hour\n            last_name_minute = last_datetime.minute\n            \n            if first_name_hour == last_name_hour and first_name_minute == last_name_minute:\n              \n                result_dict[employee_id][checkin_date].append({'first_chkin': first_name})\n            else:\n                result_dict[employee_id][checkin_date].append({'first_chkin': first_name, 'last_chkout': last_name})\n            \n            \n    for employee_id, date_logs in result_dict.items():\n        for checkin_date, logs in date_logs.items():\n            # frappe.msgprint(f\"Emp: {employee_id}\")\n            # frappe.msgprint(f\"Date: {checkin_date}\")\n            \n            first_in = None\n            last_out = None\n            \n            for log in logs:\n                if 'first_chkin' in log:\n                    first_in = log['first_chkin'] \n                if 'last_chkout' in log:\n                    last_out = log['last_chkout']\n                \n                # frappe.msgprint(f\"First: {first_in}\")\n                # frappe.msgprint(f\"Last: {last_out}\")\n                \n                if first_in and last_out:\n                    \n                    exits_atte = frappe.db.get_value('Attendance', {'employee': employee_id,'attendance_date':checkin_date, 'docstatus':1}, ['name'])\n                    if not exits_atte:\n                        \n                        chkin_datetime = frappe.db.get_value('Employee Checkin', first_in, 'time')\n                        chkout_datetime = frappe.db.get_value('Employee Checkin', last_out, 'time')\n                        \n                        chkin_time = frappe.utils.get_time(chkin_datetime)\n                        chkout_time = frappe.utils.get_time(chkout_datetime)\n                        \n                        attendance = frappe.new_doc(\"Attendance\")\n                        attendance.employee = employee_id\n                        attendance.attendance_date = checkin_date\n                        attendance.shift = shift\n                        attendance.in_time = chkin_datetime\n                        attendance.out_time = chkout_datetime\n                        attendance.check_in_time = chkin_time\n                        attendance.check_out_time = chkout_time\n                        attendance.custom_employee_checkin = first_in\n                        attendance.custom_employee_checkout = last_out\n                        attendance.status = \"Present\"\n                        \n                        attendance.save()\n                        attendance.submit()\n                        \n                        if not success_message_printed: \n                            msg.append(\"Attendance is Marked Successfully\")\n                            success_message_printed = True\n                    else:\n                        attendance_link = frappe.utils.get_link_to_form(\"Attendance\", exits_atte)\n                        msg.append(f\"Attendance already marked of Employee:{employee_id} for date {checkin_date}: {attendance_link}\")\n                        \n                elif first_in and not last_out:\n                    \n                    exits_atte = frappe.db.get_value('Attendance', {'employee': employee_id,'attendance_date':checkin_date, 'docstatus':1}, ['name'])\n                    if not exits_atte:\n                        \n                        chkin_datetime = frappe.db.get_value('Employee Checkin', first_in, 'time')\n                        chkin_time = frappe.utils.get_time(chkin_datetime)\n                        \n                        # todaydate_str = str(checkin_date)\n                        # today_datetime = todaydate_str+\" \"+shift_end\n                        # default_chkout = frappe.utils.format_datetime(today_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                        \n                        attendance = frappe.new_doc(\"Attendance\")\n                        attendance.employee = employee_id\n                        attendance.attendance_date = checkin_date\n                        attendance.shift = shift\n                        attendance.in_time = chkin_datetime\n                        # attendance.out_time = default_chkout\n                        attendance.check_in_time = chkin_time\n                        # attendance.check_out_time = shift_end\n                        attendance.custom_employee_checkin = first_in\n                        attendance.status = \"Present\"\n                        attendance.custom_remarks = \"No OutPunch\"\n                        \n                        attendance.save()\n                        attendance.submit()\n                        \n                        if not success_message_printed: \n                            msg.append(\"Attendance is Marked Successfully\")\n                            success_message_printed = True\n                    else:\n                        attendance_link = frappe.utils.get_link_to_form(\"Attendance\", exits_atte)\n                        msg.append(f\"Attendance already marked of Employee:{employee_id} for date {checkin_date}: {attendance_link}\")\n               \n    \n\nfrappe.response[\"message\"] = msg\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.333419",
  "module": "Khetan HR",
  "name": "Auto Shift - Employee Checkin",
  "reference_doctype": "Employee Checkin",
  "script": "Name = doc.name\nemp = doc.employee\ncompany = doc.company_unit\ncheckin_time = doc.time\nemp_type = doc.employee_type\ngender = doc.custom_gender\n\nTime = frappe.utils.get_datetime(checkin_time)\n\ntoday_time = frappe.utils.get_time(checkin_time)\n\ntoday_date = frappe.utils.get_date_str(checkin_time)\ntoday_date_notstr = Time.date()\ntoday = str(today_date_notstr)\n\nyesterday_Date = frappe.utils.add_days(today_date, -1)\nyesterday_Date_str = str(yesterday_Date)\n\nans1 = frappe.utils.get_datetime(yesterday_Date)\nans2 = ans1.date()\nans3 = str(ans2)\n\ntomorrow_date = frappe.utils.add_days(today_date, 1)\ntomorrow_date_str = str(tomorrow_date)\n\n\n\nans = doc.time\nHour = ans[11]+ans[12]\nMinute = ans[14]+ans[15]\n    \nans_time = frappe.utils.get_time_str(ans)\nans_hour = frappe.utils.format_time(ans_time,'H')\nans_minutes = frappe.utils.format_time(ans_time,'m')\n    \nif ans:\n    ans_date = frappe.utils.get_date_str(ans)\n    doc.date = ans_date\n        \n    doc.hour = ans_hour\n    doc.minute = ans_minutes\n    \n    \n    \n\n\nif company=='Unit 1':\n    \n    if emp_type == \"Office Staff - SU1\":\n      \n        #Fetch latest Shift Assignment record of employee\n        shift_assign = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n        \n        if shift_assign:\n            \n            Shift = shift_assign[0].shift_type\n            shift_values = frappe.db.get_value('Shift Type', Shift, ['name','start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time'])\n            \n            if shift_values:\n                shift_start = shift_values[1]\n                gs_start = frappe.utils.format_time(shift_start, \"HH:mm:ss\")\n                shift_end = shift_values[2]\n                gs_end = frappe.utils.format_time(shift_end, \"HH:mm:ss\")\n                \n                gs_begin = shift_values[3]\n                gs_after = shift_values[4]\n               \n                \n                gs_start_datetime = today+\" \"+gs_start\n                gs_start_formatted = frappe.utils.format_datetime(gs_start_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                gs_before_datetime = frappe.utils.add_to_date(gs_start_formatted, minutes=-gs_begin)\n                GS_Actual_Start = frappe.utils.get_datetime(gs_before_datetime)\n\n                \n                gs_end_datetime = today+\" \"+gs_end\n                gs_end_formatted = frappe.utils.format_datetime(gs_end_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                gs_after_datetime = frappe.utils.add_to_date(gs_end_formatted, minutes=gs_after)\n                GS_Actual_End = frappe.utils.get_datetime(gs_after_datetime)\n             \n                \n                doc.shift = Shift\n                doc.shift_actual_start = GS_Actual_Start\n                doc.shift_actual_end = GS_Actual_End\n              \n\n\n    if emp_type == \"Plant Staff - SU1\":\n       \n        shift_assign = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n        \n        if shift_assign:\n            \n            Shift = shift_assign[0].shift_type\n            shift_values = frappe.db.get_value('Shift Type', Shift, ['name','start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time'])\n            \n            if shift_values:\n                shift_start = shift_values[1]\n                ds_start = frappe.utils.format_time(shift_start, \"HH:mm:ss\")\n                shift_end = shift_values[2]\n                ds_end = frappe.utils.format_time(shift_end, \"HH:mm:ss\")\n                \n                ds_begin = shift_values[3]\n                ds_after = shift_values[4]\n               \n                \n                ds_start_datetime = today+\" \"+ds_start\n                ds_start_formatted = frappe.utils.format_datetime(ds_start_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                ds_before_datetime = frappe.utils.add_to_date(ds_start_formatted, minutes=-ds_begin)\n                DS_Actual_Start = frappe.utils.get_datetime(ds_before_datetime)\n         \n                \n                ds_end_datetime = today+\" \"+ds_end\n                ds_end_formatted = frappe.utils.format_datetime(ds_end_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                ds_after_datetime = frappe.utils.add_to_date(ds_end_formatted, minutes=ds_after)\n                DS_Actual_End = frappe.utils.get_datetime(ds_after_datetime)\n            \n                \n                doc.shift = Shift\n                doc.shift_actual_start = DS_Actual_Start\n                doc.shift_actual_end = DS_Actual_End\n          \n    \n    \n    if emp_type == \"Plant Labours - SU1\":\n        \n        if gender=='Female':\n            # shift_assign = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n            \n            ds_shift_values = frappe.db.get_value('Shift Type', filters={'custom_type': 'Day'}, fieldname=['name','start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time', 'shift_hours'])\n            \n        \n            if ds_shift_values:\n                \n                # Shift = shift_assign[0].shift_type\n                # shift_values = frappe.db.get_value('Shift Type', Shift, ['name','start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time'])\n                \n                # if shift_values:\n                ds_Shift = ds_shift_values[0]\n                shift_start = ds_shift_values[1]\n                ds_start = frappe.utils.format_time(shift_start, \"HH:mm:ss\")\n                shift_end = ds_shift_values[2]\n                ds_end = frappe.utils.format_time(shift_end, \"HH:mm:ss\")\n                \n                ds_begin = ds_shift_values[3]\n                ds_after = ds_shift_values[4]\n               \n                \n                ds_start_datetime = today+\" \"+ds_start\n                ds_start_formatted = frappe.utils.format_datetime(ds_start_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                ds_before_datetime = frappe.utils.add_to_date(ds_start_formatted, minutes=-ds_begin)\n                DS_Actual_Start = frappe.utils.get_datetime(ds_before_datetime)\n         \n                \n                ds_end_datetime = today+\" \"+ds_end\n                ds_end_formatted = frappe.utils.format_datetime(ds_end_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                ds_after_datetime = frappe.utils.add_to_date(ds_end_formatted, minutes=ds_after)\n                DS_Actual_End = frappe.utils.get_datetime(ds_after_datetime)\n            \n                \n                doc.shift = ds_Shift\n                doc.shift_actual_start = DS_Actual_Start\n                doc.shift_actual_end = DS_Actual_End\n                    \n                    \n        elif gender=='Male':\n            \n            # #Fetch latest Shift Assignment record of employee\n            # shift_assign_ds = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp, \"custom_type\": \"Day\"}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n            # shift_assign_nis = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp, \"custom_type\": \"Night\"}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n            ds_shift_values = frappe.db.get_value('Shift Type', filters={'custom_type': 'Day'}, fieldname=['name','start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time', 'shift_hours'])\n            nis_shift_values = frappe.db.get_value('Shift Type', filters={'custom_type': 'Night'}, fieldname=['name','start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time', 'shift_hours'])\n            \n\n            \n            if ds_shift_values and nis_shift_values:\n                \n                # Day Shift Fields\n                ds_Shift = ds_shift_values[0]\n                ds_start_time = ds_shift_values[1]\n                \n                \n                ds_start = frappe.utils.format_time(ds_start_time, \"HH:mm:ss\")\n                ds_end_time = ds_shift_values[2]\n                ds_end = frappe.utils.format_time(ds_end_time, \"HH:mm:ss\")\n                \n                ds_begin = ds_shift_values[3]\n                ds_after = ds_shift_values[4]\n                ds_hours = ds_shift_values[5]\n                \n               \n               \n                # Day Shift Actual In Time\n                ds_start_datetime = today+\" \"+ds_start\n                ds_start_formatted = frappe.utils.format_datetime(ds_start_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                ds_before_datetime = frappe.utils.add_to_date(ds_start_formatted, minutes=-ds_begin)\n                DS_Actual_Start = frappe.utils.get_datetime(ds_before_datetime)\n         \n                # Day Shift Actual Out Time\n                ds_end_datetime = today+\" \"+ds_end\n                ds_end_formatted = frappe.utils.format_datetime(ds_end_datetime,\"YYYY-MM-dd HH:mm:ss\")\n                ds_after_datetime = frappe.utils.add_to_date(ds_end_formatted, minutes=ds_after)\n                DS_Actual_End = frappe.utils.get_datetime(ds_after_datetime)\n                \n                #Half Day Time\n                ds_half = ds_hours/2\n                if ds_half:\n                    parsed_day_time = frappe.utils.get_time(ds_half)\n                    day_half_hour = parsed_day_time.hour\n                    day_half_datetime = frappe.utils.add_to_date(ds_start_formatted, hours=day_half_hour)\n                    Allow_Chkin_Day_Half = frappe.utils.get_datetime(day_half_datetime)\n                    \n                    \n                    \n                    \n                   \n                # Night Shift Fields\n                nis_Shift = nis_shift_values[0]\n                nis_start_time = nis_shift_values[1]\n                nis_start = frappe.utils.format_time(nis_start_time, \"HH:mm:ss\")\n                nis_end_time = nis_shift_values[2]\n                nis_end = frappe.utils.format_time(nis_end_time, \"HH:mm:ss\")\n                \n                nis_begin = nis_shift_values[3]\n                nis_after = nis_shift_values[4]\n                nis_hours = nis_shift_values[5]\n                \n                # Night Shift - Actual Start Time and Actual End Time\n                night_start_today = today+\" \"+nis_start\n                night_start_today_formated = frappe.utils.format_datetime(night_start_today,\"YYYY-MM-dd HH:mm:ss\")\n                night_start_today_1 = frappe.utils.add_to_date(night_start_today_formated, minutes=-nis_begin)\n                Actual_Night_Start_Today = frappe.utils.get_datetime(night_start_today_1)\n               \n                \n                night_end_tomorrow = tomorrow_date+\" \"+nis_end\n                night_end_tomorrow_formated = frappe.utils.format_datetime(night_end_tomorrow,\"YYYY-MM-dd HH:mm:ss\")\n                night_end_tomorrow_1 = frappe.utils.add_to_date(night_end_tomorrow_formated, minutes=nis_after)\n                Actual_Night_End_Tomorrow = frappe.utils.get_datetime(night_end_tomorrow_1)\n                \n                \n                night_start_yesterday = yesterday_Date+\" \"+nis_start\n                night_start_yesterday_formated = frappe.utils.format_datetime(night_start_yesterday,\"YYYY-MM-dd HH:mm:ss\")\n                night_start_yesterday_1 = frappe.utils.add_to_date(night_start_yesterday_formated, minutes=-nis_begin)\n                Actual_Night_Start_Yesterday = frappe.utils.get_datetime(night_start_yesterday_1)\n                \n                 \n                night_end_today = today+\" \"+nis_end\n                night_end_today_formated = frappe.utils.format_datetime(night_end_today,\"YYYY-MM-dd HH:mm:ss\")\n                night_end_today_1 = frappe.utils.add_to_date(night_end_today_formated, minutes=nis_after)\n                Actual_Night_End_Today = frappe.utils.get_datetime(night_end_today_1)\n            \n                \n                \n                day_record_in = frappe.db.get_value(\n                    \"Employee Checkin\",\n                    filters={\"employee\": emp, \"date\": today_date, \"shift\": ds_Shift, 'log_type': \"IN\"},\n                    fieldname=['name', 'shift'],\n                    order_by=\"creation DESC\",\n                )\n                day_record_out = frappe.db.get_value(\n                    \"Employee Checkin\",\n                    filters={\"employee\": emp, \"date\": today_date, \"shift\": ds_Shift, 'log_type': \"OUT\"},\n                    fieldname=['name', 'shift'],\n                    order_by=\"creation DESC\",\n                ) # Change day_record_out on 30-01-24\n                \n                night_record_yesterday_in = frappe.db.get_value(\n                    \"Employee Checkin\",\n                    filters={\"employee\": emp, \"date\": yesterday_Date, \"shift\": nis_Shift, 'log_type': \"IN\"},\n                    fieldname=['name','shift', 'shift_actual_end'],\n                    order_by=\"creation DESC\", \n                )\n                \n                night_record_today_out = frappe.db.get_value(\n                    \"Employee Checkin\",\n                    filters={\"employee\": emp, \"date\": today_date, \"shift\": nis_Shift, 'log_type': \"OUT\"},\n                    fieldname=['name','shift'],\n                    order_by=\"creation DESC\",  \n                )\n                \n              \n              \n                \n                # If time is between DS-Actual_Start(04:00) to Half Day(12:00) and there is no yesterday_night_in record and today_day_out record, it sets 'DS - IN'\n                if DS_Actual_Start <= Time < Allow_Chkin_Day_Half and night_record_yesterday_in is None and not day_record_out: # Change not day_record_out on 30-01-24\n                    doc.shift = ds_Shift\n                    doc.log_type = \"IN\"\n                    doc.shift_actual_start = DS_Actual_Start\n                    doc.shift_actual_end = DS_Actual_End\n                    frappe.msgprint('DS - IN')\n                \n                # If there is Day-IN record but not Day-Out record for that day, it sets 'DS-OUT'\n                if day_record_in: # Change not day_record_out on 30-01-24\n                    doc.shift = ds_Shift\n                    doc.log_type = \"OUT\"\n                    doc.shift_actual_start = DS_Actual_Start\n                    doc.shift_actual_end = DS_Actual_End\n                    frappe.msgprint('DS - OUT')\n              \n             \n                if Actual_Night_Start_Today <= Time and day_record_in is None:\n                    doc.shift = nis_Shift\n                    doc.log_type = \"IN\"\n                    doc.shift_actual_start = Actual_Night_Start_Today\n                    doc.shift_actual_end = Actual_Night_End_Tomorrow\n                    frappe.msgprint('NIS - IN')\n                    \n                if night_record_yesterday_in:\n                    \n                    actual_end =night_record_yesterday_in[2]\n                \n                    if Time < actual_end:\n                        \n                        doc.shift = nis_Shift\n                        doc.log_type = \"OUT\"\n                        doc.shift_actual_start = Actual_Night_Start_Yesterday\n                        doc.shift_actual_end = Actual_Night_End_Today\n                     \n                        \n                        frappe.msgprint(\"NIS - OUT\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Name = doc.name\n# emp = doc.employee\n# company = doc.company_unit\n# checkin_time = doc.time\n# emp_type = doc.employee_type\n# gender = doc.custom_gender\n\n# Time = frappe.utils.get_datetime(checkin_time)\n\n# today_time = frappe.utils.get_time(checkin_time)\n\n# today_date = frappe.utils.get_date_str(checkin_time)\n# today_date_notstr = Time.date()\n# today = str(today_date_notstr)\n\n# yesterday_Date = frappe.utils.add_days(today_date, -1)\n# yesterday_Date_str = str(yesterday_Date)\n\n# ans1 = frappe.utils.get_datetime(yesterday_Date)\n# ans2 = ans1.date()\n# ans3 = str(ans2)\n\n# tomorrow_date = frappe.utils.add_days(today_date, 1)\n# tomorrow_date_str = str(tomorrow_date)\n\n\n\n# ans = doc.time\n# Hour = ans[11]+ans[12]\n# Minute = ans[14]+ans[15]\n    \n# ans_time = frappe.utils.get_time_str(ans)\n# ans_hour = frappe.utils.format_time(ans_time,'H')\n# ans_minutes = frappe.utils.format_time(ans_time,'m')\n    \n# if ans:\n#     ans_date = frappe.utils.get_date_str(ans)\n#     doc.date = ans_date\n        \n#     doc.hour = ans_hour\n#     doc.minute = ans_minutes\n    \n    \n    \n\n\n# if company=='Unit 1':\n    \n#     if emp_type == \"Office Staff - SU1\":\n      \n#         #Fetch latest Shift Assignment record of employee\n#         shift_assign = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n        \n#         if shift_assign:\n            \n#             Shift = shift_assign[0].shift_type\n#             shift_values = frappe.db.get_value('Shift Type', Shift, ['name','start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time'])\n            \n#             if shift_values:\n#                 shift_start = shift_values[1]\n#                 gs_start = frappe.utils.format_time(shift_start, \"HH:mm:ss\")\n#                 shift_end = shift_values[2]\n#                 gs_end = frappe.utils.format_time(shift_end, \"HH:mm:ss\")\n                \n#                 gs_begin = shift_values[3]\n#                 gs_after = shift_values[4]\n               \n                \n#                 gs_start_datetime = today+\" \"+gs_start\n#                 gs_start_formatted = frappe.utils.format_datetime(gs_start_datetime,\"YYYY-MM-dd HH:mm:ss\")\n#                 gs_before_datetime = frappe.utils.add_to_date(gs_start_formatted, minutes=-gs_begin)\n#                 GS_Actual_Start = frappe.utils.get_datetime(gs_before_datetime)\n\n                \n#                 gs_end_datetime = today+\" \"+gs_end\n#                 gs_end_formatted = frappe.utils.format_datetime(gs_end_datetime,\"YYYY-MM-dd HH:mm:ss\")\n#                 gs_after_datetime = frappe.utils.add_to_date(gs_end_formatted, minutes=gs_after)\n#                 GS_Actual_End = frappe.utils.get_datetime(gs_after_datetime)\n             \n                \n#                 doc.shift = Shift\n#                 doc.shift_actual_start = GS_Actual_Start\n#                 doc.shift_actual_end = GS_Actual_End\n              \n\n\n#     if emp_type == \"Plant Staff - SU1\":\n       \n#         shift_assign = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n        \n#         if shift_assign:\n            \n#             Shift = shift_assign[0].shift_type\n#             shift_values = frappe.db.get_value('Shift Type', Shift, ['name','start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time'])\n            \n#             if shift_values:\n#                 shift_start = shift_values[1]\n#                 ds_start = frappe.utils.format_time(shift_start, \"HH:mm:ss\")\n#                 shift_end = shift_values[2]\n#                 ds_end = frappe.utils.format_time(shift_end, \"HH:mm:ss\")\n                \n#                 ds_begin = shift_values[3]\n#                 ds_after = shift_values[4]\n               \n#                 frappe.msgprint(str(ds_after))\n#                 ds_start_datetime = today+\" \"+ds_start\n#                 ds_start_formatted = frappe.utils.format_datetime(ds_start_datetime,\"YYYY-MM-dd HH:mm:ss\")\n#                 ds_before_datetime = frappe.utils.add_to_date(ds_start_formatted, minutes=-ds_begin)\n#                 DS_Actual_Start = frappe.utils.get_datetime(ds_before_datetime)\n         \n                \n#                 ds_end_datetime = today+\" \"+ds_end\n#                 ds_end_formatted = frappe.utils.format_datetime(ds_end_datetime,\"YYYY-MM-dd HH:mm:ss\")\n#                 ds_after_datetime = frappe.utils.add_to_date(ds_end_formatted, minutes=ds_after)\n#                 DS_Actual_End = frappe.utils.get_datetime(ds_after_datetime)\n            \n                \n#                 doc.shift = Shift\n#                 doc.shift_actual_start = DS_Actual_Start\n#                 doc.shift_actual_end = DS_Actual_End\n          \n    \n    \n#     if emp_type == \"Plant Labours - SU1\":\n        \n#         if gender=='Female':\n#             shift_assign = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n        \n#             if shift_assign:\n                \n#                 Shift = shift_assign[0].shift_type\n#                 shift_values = frappe.db.get_value('Shift Type', Shift, ['name','start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time'])\n                \n#                 if shift_values:\n#                     shift_start = shift_values[1]\n#                     ds_start = frappe.utils.format_time(shift_start, \"HH:mm:ss\")\n#                     shift_end = shift_values[2]\n#                     ds_end = frappe.utils.format_time(shift_end, \"HH:mm:ss\")\n                    \n#                     ds_begin = shift_values[3]\n#                     ds_after = shift_values[4]\n                   \n#                     frappe.msgprint(str(ds_after))\n#                     ds_start_datetime = today+\" \"+ds_start\n#                     ds_start_formatted = frappe.utils.format_datetime(ds_start_datetime,\"YYYY-MM-dd HH:mm:ss\")\n#                     ds_before_datetime = frappe.utils.add_to_date(ds_start_formatted, minutes=-ds_begin)\n#                     DS_Actual_Start = frappe.utils.get_datetime(ds_before_datetime)\n             \n                    \n#                     ds_end_datetime = today+\" \"+ds_end\n#                     ds_end_formatted = frappe.utils.format_datetime(ds_end_datetime,\"YYYY-MM-dd HH:mm:ss\")\n#                     ds_after_datetime = frappe.utils.add_to_date(ds_end_formatted, minutes=ds_after)\n#                     DS_Actual_End = frappe.utils.get_datetime(ds_after_datetime)\n                \n                    \n#                     doc.shift = Shift\n#                     doc.shift_actual_start = DS_Actual_Start\n#                     doc.shift_actual_end = DS_Actual_End\n                    \n                    \n#         elif gender=='Male':\n            \n#             #Fetch latest Shift Assignment record of employee\n#             shift_assign_ds = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp, \"custom_type\": \"Day\"}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n#             shift_assign_nis = frappe.db.get_all(\"Shift Assignment\", filters={\"employee\": emp, \"custom_type\": \"Night\"}, fields=['name', 'shift_type'], order_by=\"creation desc\", limit=1)\n        \n#             if shift_assign_ds:\n#                 ds_Shift = shift_assign_ds[0].shift_type\n#                 ds_shift_values = frappe.db.get_value('Shift Type', ds_Shift, ['name','start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time', 'shift_hours'])\n                \n#             if shift_assign_nis:\n#                 nis_Shift = shift_assign_nis[0].shift_type\n#                 nis_shift_values = frappe.db.get_value('Shift Type', nis_Shift, ['name','start_time','end_time', 'begin_check_in_before_shift_start_time','allow_check_out_after_shift_end_time', 'shift_hours'])\n                \n#             if ds_shift_values or nis_shift_values:\n                \n#                 # Day Shift Fields\n#                 ds_start_time = ds_shift_values[1]\n#                 ds_start = frappe.utils.format_time(ds_start_time, \"HH:mm:ss\")\n#                 ds_end_time = ds_shift_values[2]\n#                 ds_end = frappe.utils.format_time(ds_end_time, \"HH:mm:ss\")\n                \n#                 ds_begin = ds_shift_values[3]\n#                 ds_after = ds_shift_values[4]\n#                 ds_hours = ds_shift_values[5]\n                \n               \n               \n#                 # Day Shift Actual In Time\n#                 ds_start_datetime = today+\" \"+ds_start\n#                 ds_start_formatted = frappe.utils.format_datetime(ds_start_datetime,\"YYYY-MM-dd HH:mm:ss\")\n#                 ds_before_datetime = frappe.utils.add_to_date(ds_start_formatted, minutes=-ds_begin)\n#                 DS_Actual_Start = frappe.utils.get_datetime(ds_before_datetime)\n         \n#                 # Day Shift Actual Out Time\n#                 ds_end_datetime = today+\" \"+ds_end\n#                 ds_end_formatted = frappe.utils.format_datetime(ds_end_datetime,\"YYYY-MM-dd HH:mm:ss\")\n#                 ds_after_datetime = frappe.utils.add_to_date(ds_end_formatted, minutes=ds_after)\n#                 DS_Actual_End = frappe.utils.get_datetime(ds_after_datetime)\n                \n#                 #Half Day Time\n#                 ds_half = ds_hours/2\n#                 if ds_half:\n#                     parsed_day_time = frappe.utils.get_time(ds_half)\n#                     day_half_hour = parsed_day_time.hour\n#                     day_half_datetime = frappe.utils.add_to_date(ds_start_formatted, hours=day_half_hour)\n#                     Allow_Chkin_Day_Half = frappe.utils.get_datetime(day_half_datetime)\n                    \n                    \n                    \n                    \n                    \n#                 # Night Shift Fields\n#                 nis_start_time = nis_shift_values[1]\n#                 nis_start = frappe.utils.format_time(nis_start_time, \"HH:mm:ss\")\n#                 nis_end_time = nis_shift_values[2]\n#                 nis_end = frappe.utils.format_time(nis_end_time, \"HH:mm:ss\")\n                \n#                 nis_begin = nis_shift_values[3]\n#                 nis_after = nis_shift_values[4]\n#                 nis_hours = nis_shift_values[5]\n                \n#                 # Night Shift - Actual Start Time and Actual End Time\n#                 night_start_today = today+\" \"+nis_start\n#                 night_start_today_formated = frappe.utils.format_datetime(night_start_today,\"YYYY-MM-dd HH:mm:ss\")\n#                 night_start_today_1 = frappe.utils.add_to_date(night_start_today_formated, minutes=-nis_begin)\n#                 Actual_Night_Start_Today = frappe.utils.get_datetime(night_start_today_1)\n               \n                \n#                 night_end_tomorrow = tomorrow_date+\" \"+nis_end\n#                 night_end_tomorrow_formated = frappe.utils.format_datetime(night_end_tomorrow,\"YYYY-MM-dd HH:mm:ss\")\n#                 night_end_tomorrow_1 = frappe.utils.add_to_date(night_end_tomorrow_formated, minutes=nis_after)\n#                 Actual_Night_End_Tomorrow = frappe.utils.get_datetime(night_end_tomorrow_1)\n                \n                \n#                 night_start_yesterday = yesterday_Date+\" \"+nis_start\n#                 night_start_yesterday_formated = frappe.utils.format_datetime(night_start_yesterday,\"YYYY-MM-dd HH:mm:ss\")\n#                 night_start_yesterday_1 = frappe.utils.add_to_date(night_start_yesterday_formated, minutes=-nis_begin)\n#                 Actual_Night_Start_Yesterday = frappe.utils.get_datetime(night_start_yesterday_1)\n                \n                 \n#                 night_end_today = today+\" \"+nis_end\n#                 night_end_today_formated = frappe.utils.format_datetime(night_end_today,\"YYYY-MM-dd HH:mm:ss\")\n#                 night_end_today_1 = frappe.utils.add_to_date(night_end_today_formated, minutes=nis_after)\n#                 Actual_Night_End_Today = frappe.utils.get_datetime(night_end_today_1)\n            \n                \n                \n#                 day_record_in = frappe.db.get_value(\n#                     \"Employee Checkin\",\n#                     filters={\"employee\": emp, \"date\": today_date, \"shift\": ds_Shift, 'log_type': \"IN\"},\n#                     fieldname=['name', 'shift'],\n#                     order_by=\"creation DESC\",\n#                 )\n#                 day_record_out = frappe.db.get_value(\n#                     \"Employee Checkin\",\n#                     filters={\"employee\": emp, \"date\": today_date, \"shift\": ds_Shift, 'log_type': \"OUT\"},\n#                     fieldname=['name', 'shift'],\n#                     order_by=\"creation DESC\",\n#                 ) # Change day_record_out on 30-01-24\n                \n#                 night_record_yesterday_in = frappe.db.get_value(\n#                     \"Employee Checkin\",\n#                     filters={\"employee\": emp, \"date\": yesterday_Date, \"shift\": nis_Shift, 'log_type': \"IN\"},\n#                     fieldname=['name','shift', 'shift_actual_end'],\n#                     order_by=\"creation DESC\", \n#                 )\n                \n#                 night_record_today_out = frappe.db.get_value(\n#                     \"Employee Checkin\",\n#                     filters={\"employee\": emp, \"date\": today_date, \"shift\": nis_Shift, 'log_type': \"OUT\"},\n#                     fieldname=['name','shift'],\n#                     order_by=\"creation DESC\",  \n#                 )\n                \n              \n                    \n#                 if DS_Actual_Start <= Time < Allow_Chkin_Day_Half and night_record_yesterday_in is None and not day_record_out: # Change not day_record_out on 30-01-24\n#                     doc.shift = ds_Shift\n#                     doc.log_type = \"IN\"\n#                     doc.shift_actual_start = DS_Actual_Start\n#                     doc.shift_actual_end = DS_Actual_End\n#                     frappe.msgprint('DS - IN')\n                    \n#                 if day_record_in and not day_record_out: # Change not day_record_out on 30-01-24\n#                     doc.shift = ds_Shift\n#                     doc.log_type = \"OUT\"\n#                     doc.shift_actual_start = DS_Actual_Start\n#                     doc.shift_actual_end = DS_Actual_End\n#                     frappe.msgprint('DS - OUT')\n              \n             \n#                 if Actual_Night_Start_Today <= Time and day_record_in is None:\n#                     doc.shift = nis_Shift\n#                     doc.log_type = \"IN\"\n#                     doc.shift_actual_start = Actual_Night_Start_Today\n#                     doc.shift_actual_end = Actual_Night_End_Tomorrow\n#                     frappe.msgprint('NIS - IN')\n                    \n#                 if night_record_yesterday_in and night_record_today_out is None:\n                    \n#                     actual_end =night_record_yesterday_in[2]\n#                     frappe.msgprint(str(actual_end))\n#                     if Time < actual_end:\n                        \n#                         doc.shift = nis_Shift\n#                         doc.log_type = \"OUT\"\n#                         doc.shift_actual_start = Actual_Night_Start_Yesterday\n#                         doc.shift_actual_end = Actual_Night_End_Today\n                     \n                        \n#                         frappe.msgprint(\"NIS - OUT\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.511425",
  "module": "Khetan HR",
  "name": "Set Hour and Minutes in Custom field",
  "reference_doctype": "Employee Checkin",
  "script": "emp_nm = doc.employee_name\nCompany = doc.company_unit\n\n\nans = doc.time\nHour = ans[11]+ans[12]\nMinute = ans[14]+ans[15]\n    \nans_time = frappe.utils.get_time_str(ans)\nans_hour = frappe.utils.format_time(ans_time,'H')\nans_minutes = frappe.utils.format_time(ans_time,'m')\n    \nif ans:\n    ans_date = frappe.utils.get_date_str(ans)\n    doc.date = ans_date\n        \n    doc.hour = ans_hour\n    doc.minute = ans_minutes\n    \n    \n    # frappe.msgprint(ans_hour)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.489524",
  "module": "Khetan HR",
  "name": "Split Time and Calculate Overtime",
  "reference_doctype": "Attendance",
  "script": "in_time = str(doc.in_time)\nout_time = str(doc.out_time)\nshift_name = doc.shift\nattendance_name = doc.name\ncompany = doc.company\n\n\n# Fetch shift hours\nshift_Hour = frappe.db.get_value('Shift Type', shift_name, ['shift_hours'])\nshift_start = frappe.db.get_value('Shift Type', shift_name, ['start_time'])\nshift_end = frappe.db.get_value('Shift Type', shift_name, ['end_time'])\nhalf_day_hour = frappe.db.get_value('Shift Type', shift_name, ['working_hours_threshold_for_half_day'])\nlate_entry_grace = frappe.db.get_value('Shift Type', shift_name, ['late_entry_grace_period'])\nearly_exit_grace = frappe.db.get_value('Shift Type', shift_name, ['early_exit_grace_period'])\n\n\n# For splitting time from in_time and out_time\ntry:\n    new_in_date=in_time.split(\" \")[0:][0]\n    new_in_time=in_time.split(\" \")[1:][0]\nexcept IndexError:\n    new_in_date = ''\n    new_in_time = ''\n    \n  \n    \ntry:\n    new_out_date=in_time.split(\" \")[0:][0]\n    new_out_time=out_time.split(\" \")[1:][0]\nexcept IndexError:\n    new_out_date\n    new_out_time = ''\n    \nfrappe.db.set_value('Attendance', doc.name, 'check_in_time', new_in_time);\nfrappe.db.set_value('Attendance', doc.name, 'check_out_time', new_out_time);\n\n\n# Overtime Calculation\nif new_in_time and new_out_time:\n\n    Tot_dur = frappe.utils.time_diff(new_out_time, new_in_time)\n    \n    \n    # Overtime for Day Shift\n    if ',' not in str(Tot_dur):\n\n        Tot_dur_formatted = frappe.utils.format_time(Tot_dur,'H.m')\n        frappe.db.set_value('Attendance', attendance_name, 'custom_total_hours', Tot_dur_formatted)\n        \n        \n        # Update Half Day Status\n        if Tot_dur_formatted and float(Tot_dur_formatted) < half_day_hour :\n            frappe.db.set_value('Attendance', attendance_name, 'status', 'Half Day')\n        else:\n            frappe.db.set_value('Attendance', attendance_name, 'status', 'Present')\n            \n        \n        if Tot_dur > shift_Hour:\n            OT = frappe.utils.time_diff(Tot_dur, shift_Hour)\n            OT_formatted = frappe.utils.format_time(OT,'H.m')\n            Work_dur = frappe.utils.format_time(shift_Hour,'H.m')\n            \n            frappe.db.set_value('Attendance', attendance_name, 'overtime', OT_formatted)\n            frappe.db.set_value('Attendance', attendance_name, 'new_hours', Work_dur)\n      \n        else:\n            frappe.db.set_value('Attendance', attendance_name, 'overtime', \"00.00\")\n            frappe.db.set_value('Attendance', attendance_name, 'new_hours', Tot_dur_formatted)\n    \n    else:\n        Tot_dur_str = str(Tot_dur).split(\", \")[1]\n        Tot_dur_time = frappe.utils.get_time(Tot_dur_str)\n        shift_Hour_time = frappe.utils.get_time(shift_Hour)\n        \n        Tot_dur_formatted = frappe.utils.format_time(Tot_dur_str,'H.m')\n        frappe.db.set_value('Attendance', attendance_name, 'custom_total_hours', Tot_dur_formatted)\n        \n        \n        # Update Half Day Status\n        if Tot_dur_formatted and float(Tot_dur_formatted) < half_day_hour :\n            frappe.db.set_value('Attendance', attendance_name, 'status', 'Half Day')\n        else:\n            frappe.db.set_value('Attendance', attendance_name, 'status', 'Present')\n        \n        \n        if Tot_dur_time > shift_Hour_time:\n            \n            OT = frappe.utils.time_diff(Tot_dur_str, shift_Hour)\n            OT_formatted = frappe.utils.format_time(OT,'H.m')\n            Work_dur = frappe.utils.format_time(shift_Hour,'H.m')\n            \n            frappe.db.set_value('Attendance', attendance_name, 'overtime', OT_formatted)\n            frappe.db.set_value('Attendance', attendance_name, 'new_hours', Work_dur)\n            \n            \n        else:\n            frappe.db.set_value('Attendance', attendance_name, 'overtime', \"00.00\")\n            frappe.db.set_value('Attendance', attendance_name, 'new_hours', Tot_dur_formatted)\n    \n    \n    \n    # Late Entry calculation\n    start_datetime = new_in_date+\" \"+str(shift_start)\n    start_datetime_formatted = frappe.utils.format_datetime(start_datetime,\"YYYY-MM-dd HH:mm:ss\")\n    late_in_datetime = frappe.utils.add_to_date(start_datetime_formatted, minutes=late_entry_grace)\n    late_in_time = frappe.utils.get_time(late_in_datetime)\n    \n    \n    new_in = frappe.utils.get_time(new_in_time)\n  \n    \n    if new_in > late_in_time:\n    \n        late_in = frappe.utils.time_diff(new_in_time, str(late_in_time))\n        late_in_formatted = frappe.utils.format_time(late_in,'H.m')\n  \n        frappe.db.set_value('Attendance', attendance_name, 'custom_late_entry', late_in_formatted)\n        \n         \n    # Early Exit calculation\n    end_datetime = new_out_date+\" \"+str(shift_end)\n    end_datetime_formatted = frappe.utils.format_datetime(end_datetime,\"YYYY-MM-dd HH:mm:ss\")\n    early_exit_datetime = frappe.utils.add_to_date(end_datetime_formatted, minutes=-early_exit_grace)\n    early_exit_time = frappe.utils.get_time(early_exit_datetime)\n    \n    \n    new_out = frappe.utils.get_time(new_out_time)\n    \n    # frappe.msgprint(f\"Shift End: {shift_end}\")\n    # frappe.msgprint(f\"Early Exit Grace: {early_exit_time}\")\n    # frappe.msgprint(f\"Actual Out: {new_out_time}\")\n    \n    \n    if new_out < early_exit_time:\n        \n        early_exit = frappe.utils.time_diff(str(early_exit_time), new_out_time)\n        early_exit_formatted = frappe.utils.format_time(early_exit,'H.m')\n        \n        # frappe.msgprint(f\"Early Exit: {early_exit_formatted}\")\n  \n        frappe.db.set_value('Attendance', attendance_name, 'custom_late_entry', early_exit_formatted)\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "Daily",
  "modified": "2024-06-03 07:34:18.466289",
  "module": "Khetan HR",
  "name": "Process Auto Attendance",
  "reference_doctype": null,
  "script": "\"hrms.hr.doctype.shift_type.shift_type.process_auto_attendance_for_all_shifts\"",
  "script_type": "Scheduler Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.557469",
  "module": "Khetan HR",
  "name": "Update Attendance Record for auto shift detection checkin",
  "reference_doctype": "Attendance",
  "script": "emp = doc.employee\nemp_type = doc.employee_type\ncompany = doc.company\nat_date = doc.attendance_date\nShift = doc.shift\nchk_in = doc.in_time\nchk_out = doc.out_time\nwork_hours = doc.new_hours\n\ncompany_unit = frappe.db.get_value('Company', company, 'select_unit_')\n\nif chk_in:\n    \n    in_date = frappe.utils.get_date_str(chk_in)\n    in_time_str = frappe.utils.get_time(chk_in)\n    tomorrow_date = frappe.utils.add_days(in_date, 1)\n  \nif chk_out:\n\n    out_date = frappe.utils.get_date_str(chk_out)\n    out_time_str = frappe.utils.get_time(chk_out)\n    yesterday_Date = frappe.utils.add_days(out_date, -1)\n    \nif doc.is_new():\n    \n    # For SANTOSH UNIT 1\n    if company_unit == \"Unit 1\":\n        if emp_type == \"Plant Labours - SU1\":\n            \n            shift_type = frappe.db.get_value('Shift Type', Shift, 'custom_type')\n  \n            if shift_type == \"Day\":\n                \n                # Condition: If Check-In Time exists and Check-Out Time, Work Hours doesn't exists in attendance record\n                if chk_in and not chk_out and not work_hours:\n                    \n                    checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                    # frappe.msgprint(str(checkin_log))\n                    if checkin_log:\n                        first_checkin_name = checkin_log[0][0]\n                        first_checkin_time = checkin_log[0][1]\n                        first_checkin_shift = checkin_log[0][2]\n                        doc.in_time = first_checkin_time\n                        \n                    checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                    if checkout_log:\n                        last_checkout_name = checkout_log[-1][0]\n                        last_checkout_time = checkout_log[-1][1]\n                        doc.out_time = last_checkout_time\n                        \n                    else:\n                        \n                        last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                        last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                        first_checkin_time = doc.in_time\n                        WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                        WorkHours_Str = str(WorkHours)\n                      \n                        if ' ' in WorkHours_Str:\n                            Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                            final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                            doc.new_hours = final_wh_new\n                            doc.custom_remarks = \"No OutPunch\"\n      \n                  \n\n                # Condition: If Check-In Time exists and Check-Out Time, Work Hours doesn't exists in attendance record\n                elif chk_out and not chk_in and not work_hours:\n                    \n                    # doc.custom_test = \"Hello\"\n                    checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\", \"shift\"], as_list=True)\n                    if checkout_log:\n                        last_checkout_name = checkout_log[-1][0]\n                        last_checkout_time = checkout_log[-1][1]\n                        last_checkout_shift = checkout_log[-1][2]\n                        doc.out_time = last_checkout_time\n                        \n                    checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                    if checkin_log:\n                        first_checkin_name = checkin_log[0][0]\n                        first_checkin_time = checkin_log[0][1]\n                        doc.in_time = first_checkin_time\n        \n                    else:\n                        first_chkin = frappe.db.get_value('Shift Type', Shift, 'start_time')\n                        first_chkin_time = frappe.utils.get_time_str(first_chkin)\n                        last_checkout_time = doc.out_time\n                        WorkHours = frappe.utils.time_diff(last_checkout_time, first_chkin_time)\n                        WorkHours_Str = str(WorkHours)\n                      \n                        if ' ' in WorkHours_Str:\n                            Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                            final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                            doc.new_hours = final_wh_new\n                            doc.custom_remarks = \"No OutPunch\"\n                \n                \n                # Condition: If Check-In Time and Check-Out Time exists\n                elif chk_in and chk_out:\n\n                    # Condition: If Attendance Date and Check-In Date or Check-Out Date are not same\n                    if at_date != in_date or at_date != out_date and doc.custom_type == \"Day\":\n                        checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                        if checkin_log:\n                            first_checkin_name = checkin_log[0][0]\n                            first_checkin_time = checkin_log[0][1]\n                            first_checkin_shift = checkin_log[0][2]\n                            doc.in_time = first_checkin_time\n                            \n                        checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                        if checkout_log:\n                            last_checkout_name = checkout_log[-1][0]\n                            last_checkout_time = checkout_log[-1][1]\n                            doc.out_time = last_checkout_time\n                            \n                        else:\n                            \n                            last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                            last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                            first_checkin_time = doc.in_time\n                            WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                            WorkHours_Str = str(WorkHours)\n                          \n                            if ' ' in WorkHours_Str:\n                                Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                                final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                                doc.new_hours = final_wh_new\n                                doc.custom_remarks = \"No OutPunch\"\n                  \n                  \n                    # Condition: If Attendance Date and Check-In Date and Check-Out Date are same                \n                    elif at_date == in_date and at_date == out_date:\n                        \n                        # Condition: If Check-In and Check-Out Time are same in particular date\n                        if in_time_str == out_time_str:\n                            # Count how many records are exists in emp checkin in a particular date\n                            checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                            if checkin_log:\n                                first_checkin_name = checkin_log[0][0]\n                                first_checkin_time = checkin_log[0][1]\n                                first_checkin_shift = checkin_log[0][2]\n                                doc.in_time = first_checkin_time\n                                \n                            checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                            if checkout_log:\n                                last_checkout_name = checkout_log[-1][0]\n                                last_checkout_time = checkout_log[-1][1]\n                                doc.out_time = last_checkout_time\n                                \n                            else:\n                                \n                                last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                                last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                                first_checkin_time = doc.in_time\n                                WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                                WorkHours_Str = str(WorkHours)\n                              \n                                if ' ' in WorkHours_Str:\n                                    Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                                    final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                                    doc.new_hours = final_wh_new\n                                    doc.custom_remarks = \"No OutPunch\"\n\n            \n            \n            # For Night Shift\n            if shift_type == \"Night\":\n                \n            # Condition: If Check-In Time exists and Check-Out Time and Work Hours don't exist in the attendance record\n                if chk_in and not chk_out and not work_hours:\n                    checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": [\"between\", [at_date, tomorrow_date]], \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                    if checkin_log:\n                        first_checkin_name = checkin_log[0][0]\n                        first_checkin_time = checkin_log[0][1]\n                        first_checkin_shift = checkin_log[0][2]\n                        doc.in_time = first_checkin_time\n                                \n                    checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": [\"between\", [at_date, tomorrow_date]], \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                    if checkout_log:\n                        last_checkout_name = checkout_log[-1][0]\n                        last_checkout_time = checkout_log[-1][1]\n                        doc.out_time = last_checkout_time\n                                \n                    else:\n                        \n                        last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                        last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                        first_checkin_time = doc.in_time\n                        WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                        WorkHours_Str = str(WorkHours)\n                              \n                        if ' ' in WorkHours_Str:\n                            Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                            final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                            doc.new_hours = final_wh_new\n                            doc.custom_remarks = \"No OutPunch\"\n                            \n        elif emp_type == \"Office Staff - SU1\" or emp_type == \"Plant Staff - SU1\":\n            if chk_in and not chk_out and not work_hours:\n                checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                # frappe.msgprint(str(checkin_log))\n                if checkin_log:\n                    first_checkin_name = checkin_log[0][0]\n                    first_checkin_time = checkin_log[0][1]\n                    first_checkin_shift = checkin_log[0][2]\n                    doc.in_time = first_checkin_time\n                    \n                checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                if checkout_log:\n                    last_checkout_name = checkout_log[-1][0]\n                    last_checkout_time = checkout_log[-1][1]\n                    doc.out_time = last_checkout_time\n                    \n                else:\n                    \n                    last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                    last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                    first_checkin_time = doc.in_time\n                    WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                    WorkHours_Str = str(WorkHours)\n                  \n                    if ' ' in WorkHours_Str:\n                        Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                        final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                        doc.new_hours = final_wh_new\n                        doc.custom_remarks = \"No OutPunch\"\n            \n\n\n\n    # For SANTOSH UNIT 2\n    if company_unit == \"Unit 2\":\n        \n        shift_type = frappe.db.get_value('Shift Type', Shift, 'custom_type')\n        # frappe.msgprint(str(shift_type))\n            \n        # if doc.shift == \"Day Shift - SU2\":\n        if shift_type == \"Day\":\n                \n            # Condition: If Check-In Time exists and Check-Out Time, Work Hours doesn't exists in attendance record\n            if chk_in and not chk_out and not work_hours:\n                \n                checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                if checkin_log:\n                    first_checkin_name = checkin_log[0][0]\n                    first_checkin_time = checkin_log[0][1]\n                    first_checkin_shift = checkin_log[0][2]\n                    doc.in_time = first_checkin_time\n                    \n                checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                if checkout_log:\n                    last_checkout_name = checkout_log[-1][0]\n                    last_checkout_time = checkout_log[-1][1]\n                    doc.out_time = last_checkout_time\n                    \n                else:\n                    \n                    last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                    last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                    first_checkin_time = doc.in_time\n                    WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                    WorkHours_Str = str(WorkHours)\n                  \n                    if ' ' in WorkHours_Str:\n                        Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                        final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                        doc.new_hours = final_wh_new\n                        doc.custom_remarks = \"No OutPunch\"\n  \n              \n\n            # Condition: If Check-In Time exists and Check-Out Time, Work Hours doesn't exists in attendance record\n            elif chk_out and not chk_in and not work_hours:\n                \n                # doc.custom_test = \"Hello\"\n                checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\", \"shift\"], as_list=True)\n                if checkout_log:\n                    last_checkout_name = checkout_log[-1][0]\n                    last_checkout_time = checkout_log[-1][1]\n                    last_checkout_shift = checkout_log[-1][2]\n                    doc.out_time = last_checkout_time\n                    \n                checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                if checkin_log:\n                    first_checkin_name = checkin_log[0][0]\n                    first_checkin_time = checkin_log[0][1]\n                    doc.in_time = first_checkin_time\n    \n                else:\n                   \n                    first_chkin = frappe.db.get_value('Shift Type', Shift, 'start_time')\n                    first_chkin_time = frappe.utils.get_time_str(first_chkin)\n                    last_checkout_time = doc.out_time\n                    WorkHours = frappe.utils.time_diff(last_checkout_time, first_chkin_time)\n                    WorkHours_Str = str(WorkHours)\n                  \n                    if ' ' in WorkHours_Str:\n                        Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                        final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                        doc.new_hours = final_wh_new\n                        doc.custom_remarks = \"No OutPunch\"\n            \n            \n            # Condition: If Check-In Time and Check-Out Time exists\n            elif chk_in and chk_out:\n\n                # Condition: If Attendance Date and Check-In Date or Check-Out Date are not same\n                if at_date != in_date or at_date != out_date and doc.custom_type == \"Day\":\n                    checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                    if checkin_log:\n                        first_checkin_name = checkin_log[0][0]\n                        first_checkin_time = checkin_log[0][1]\n                        first_checkin_shift = checkin_log[0][2]\n                        doc.in_time = first_checkin_time\n                        \n                    checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                    if checkout_log:\n                        last_checkout_name = checkout_log[-1][0]\n                        last_checkout_time = checkout_log[-1][1]\n                        doc.out_time = last_checkout_time\n                        \n                    else:\n                       \n                        last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                        last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                        first_checkin_time = doc.in_time\n                        WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                        WorkHours_Str = str(WorkHours)\n                      \n                        if ' ' in WorkHours_Str:\n                            Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                            final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                            doc.new_hours = final_wh_new\n                            doc.custom_remarks = \"No OutPunch\"\n              \n              \n                # Condition: If Attendance Date and Check-In Date and Check-Out Date are same                \n                elif at_date == in_date and at_date == out_date:\n                    \n                    # Condition: If Check-In and Check-Out Time are same in particular date\n                    if in_time_str == out_time_str:\n                        # Count how many records are exists in emp checkin in a particular date\n                        checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                        if checkin_log:\n                            first_checkin_name = checkin_log[0][0]\n                            first_checkin_time = checkin_log[0][1]\n                            first_checkin_shift = checkin_log[0][2]\n                            doc.in_time = first_checkin_time\n                            \n                        checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": at_date, \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                        if checkout_log:\n                            last_checkout_name = checkout_log[-1][0]\n                            last_checkout_time = checkout_log[-1][1]\n                            doc.out_time = last_checkout_time\n                            \n                        else:\n                            \n                            last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                            last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                            first_checkin_time = doc.in_time\n                            WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                            WorkHours_Str = str(WorkHours)\n                          \n                            if ' ' in WorkHours_Str:\n                                Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                                final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                                doc.new_hours = final_wh_new\n                                doc.custom_remarks = \"No OutPunch\"\n\n            \n            \n        # For Night Shift\n        if shift_type == \"Night\":\n            \n        # Condition: If Check-In Time exists and Check-Out Time and Work Hours don't exist in the attendance record\n            if chk_in and not chk_out and not work_hours:\n                checkin_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": [\"between\", [at_date, tomorrow_date]], \"shift\": Shift, \"log_type\": \"IN\"}, fields=[\"name\",\"time\",\"shift\"], as_list=True)\n                if checkin_log:\n                    first_checkin_name = checkin_log[0][0]\n                    first_checkin_time = checkin_log[0][1]\n                    first_checkin_shift = checkin_log[0][2]\n                    doc.in_time = first_checkin_time\n                            \n                checkout_log = frappe.db.get_list(\"Employee Checkin\", filters={\"employee\": emp, \"date\": [\"between\", [at_date, tomorrow_date]], \"shift\": Shift, \"log_type\": \"OUT\"}, fields=[\"name\",\"time\"], as_list=True)\n                if checkout_log:\n                    last_checkout_name = checkout_log[-1][0]\n                    last_checkout_time = checkout_log[-1][1]\n                    doc.out_time = last_checkout_time\n                            \n                else:\n                   \n                    last_chkout = frappe.db.get_value('Shift Type', Shift, 'end_time')\n                    last_chkout_time = frappe.utils.get_time_str(last_chkout)\n                    first_checkin_time = doc.in_time\n                    WorkHours = frappe.utils.time_diff(last_chkout_time, first_checkin_time)\n                    WorkHours_Str = str(WorkHours)\n                          \n                    if ' ' in WorkHours_Str:\n                        Splitted_WorkHours = WorkHours_Str.split(\" \")[2:][0]\n                        final_wh_new = frappe.utils.format_time(Splitted_WorkHours,'H.m')\n                        doc.new_hours = final_wh_new\n                        doc.custom_remarks = \"No OutPunch\"\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "bulk_payment_method",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.446402",
  "module": "Khetan HR",
  "name": "bulk_payment_method",
  "reference_doctype": null,
  "script": "bulk_department = frappe.form_dict[\"name\"]\nlabours = frappe.db.get_value('Department', bulk_department, 'labours')\ncompany_units = frappe.db.get_value('Department', bulk_department, 'company_unit')\nlabours2 = str(labours)\n\nfrappe.response[\"labours\"]=labours2\nfrappe.response[\"company_units\"]=company_units",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.430582",
  "module": "Khetan HR",
  "name": "Calculate Overtime in Card Attendance",
  "reference_doctype": "Card Attendance",
  "script": "workingHours = doc.card_working_hours\nstandardHours = doc.standard_working_hours\nName = doc.name;\n\n\nstandardHours_Float = float(doc.standard_working_hours)\nstandardHours_For_OT = standardHours_Float + 1\n\nif workingHours:\n    workingHours_Float = float(doc.card_working_hours)\n    workingHours_Str = str(doc.card_working_hours)\n    \n    # if working hours is integer\n    if '.' not in workingHours_Str:\n        \n        # if working hours is greater then standard hours\n        if workingHours_Float > standardHours_Float :\n            ot = workingHours_Float-standardHours_Float\n            OverTime = ot + 0.0\n            frappe.db.set_value('Card Attendance', Name, 'overtime', OverTime);\n            frappe.db.set_value('Card Attendance', Name, 'actual_working_hours', workingHours_Float);\n        else:\n            frappe.db.set_value('Card Attendance', Name, 'actual_working_hours', workingHours_Float);\n        \n    else:\n        if workingHours_Float > standardHours_Float :\n            OT = workingHours_Float - standardHours_Float\n            OT1 = str(OT)\n            OverTime1 = frappe.format(OT1, {\"fieldtype\": \"Float\", \"precision\": 2})\n            frappe.db.set_value('Card Attendance', Name, 'overtime', OverTime1);\n            \n            if workingHours_Float > standardHours_For_OT:\n                \n                # for converting hours and minutes into hours\n                hour=workingHours_Str.split(\".\")[0]\n                minute=workingHours_Str.split(\".\")[1]\n                \n                new_hour = int(hour) + (int(minute) / 60)\n                tot_Hour = round(new_hour, 1)\n                # frappe.msgprint(str(tot_Hour))\n                frappe.db.set_value('Card Attendance', Name, 'actual_working_hours', tot_Hour);\n            else:\n                hour=workingHours_Str.split(\".\")[0]\n                minute=workingHours_Str.split(\".\")[1]\n                new_hour = float(hour)+0.0\n                frappe.db.set_value('Card Attendance', Name, 'actual_working_hours', new_hour);\n        else:\n            hour=workingHours_Str.split(\".\")[0]\n            minute=workingHours_Str.split(\".\")[1]\n                \n            new_hour = int(hour) + (int(minute) / 60)\n            tot_Hour = round(new_hour, 1)\n            # frappe.msgprint(str(tot_Hour))\n            frappe.db.set_value('Card Attendance', Name, 'actual_working_hours', tot_Hour);\n        \n\n\n\n\n\n\n    \n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "working_hours",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.415617",
  "module": "Khetan HR",
  "name": "Fetch Working hours in Timesheet",
  "reference_doctype": null,
  "script": "from_date=frappe.form_dict['from_date']\nto_date=frappe.form_dict['to_date']\nemployee=frappe.form_dict['emp']\n\n\ntotHours = frappe.db.sql(f\"select sum(round(card_working_hours, 1)) as cardhour, sum(round(advance, 1)) as empadvance, employee, attendance_date from `tabCard Attendance` where employee='{ employee }' and attendance_date BETWEEN '{ from_date }' AND '{ to_date }' \",as_dict=1)\n\ncountPresent = frappe.db.sql(f\"select count(employee) as countpresent from `tabCard Attendance` where employee='{ employee }' and attendance_date BETWEEN '{ from_date }' AND '{ to_date }' and card_status='Present' \",as_dict=1)\npresentDays = countPresent[0].countpresent\n# frappe.msgprint(str(cardres))\n\ncountAbsent = frappe.db.sql(f\"select count(employee) as countabsent from `tabCard Attendance` where employee='{ employee }' and attendance_date BETWEEN '{ from_date }' AND '{ to_date }' and card_status='Absent' \",as_dict=1)\nabsentDays = countAbsent[0].countabsent\n# frappe.msgprint(str(cardres))\n\ncountHalfDay = frappe.db.sql(f\"select count(employee) as counthalfday from `tabCard Attendance` where employee='{ employee }' and attendance_date BETWEEN '{ from_date }' AND '{ to_date }' and card_status='Half Day' \",as_dict=1)\nhalfDays = countHalfDay[0].counthalfday\ntot_halfday = halfDays/2\n# frappe.msgprint(str(half_day))\n\ntot_present = presentDays+tot_halfday\n# frappe.msgprint(str(tot_present))\n\n\n\nfrappe.response['message'] = totHours;\nfrappe.response['msgpresnt'] = tot_present;\nfrappe.response['msgabsent'] = absentDays;\n",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.645349",
  "module": "Khetan HR",
  "name": "Set status 'Paid' in additional salary when salary slip is submitted",
  "reference_doctype": "Salary Slip",
  "script": "sal_slip_nm = doc.name\nsal_slip_doc = frappe.get_doc(\"Salary Slip\", sal_slip_nm)\nsal_deduction = sal_slip_doc.get(\"deductions\")\n\nall_paid=False\n\n\nfor sal_ded in sal_deduction:\n    nm = sal_ded.name\n    sal_component = sal_ded.salary_component\n    amount = sal_ded.amount\n    com_type = sal_ded.custom_type\n    ear_com_type = sal_ded.custom_earning_component_type\n    ded_com_type = sal_ded.custom_deduction_component_type\n    addi_salary = sal_ded.additional_salary\n    \n    payroll_date = frappe.db.get_value('Additional Salary', addi_salary, 'payroll_date')\n    \n    adv_entry = frappe.db.get_value('Additional Salary', addi_salary, 'custom_additional_payment')\n    adv_entry_type = frappe.db.get_value('Additional Payment', adv_entry, 'type')\n    adv_entry_advance_type = frappe.db.get_value('Additional Payment', adv_entry, 'advance_type')\n    \n    if addi_salary:\n\t    frappe.db.set_value('Additional Salary',addi_salary, 'custom_status', 'Paid');\n\t    \n\t    if adv_entry:\n\t        \n\t        # For Advance\n\t        if adv_entry_type=='Advance':\n\t            \n\t            if adv_entry_advance_type=='In Full Amount':\n\t               # frappe.db.set_value('Additional Payment',adv_entry, 'status', 'Paid');\n\t               # frappe.db.set_value('Additional Payment',adv_entry, 'paid_from_staff', sal_slip_nm);\n\t               \n\t               adv_entry_doc = frappe.get_doc('Additional Payment', adv_entry)\n\t                \n\t               adv_details = frappe.get_all(\"Additional Salary\", filters={\"custom_additional_payment\": adv_entry}, fields=['custom_status'])\n\t               all_paid = all(data.custom_status == 'Paid' for data in adv_details)\n\t               frappe.msgprint(str(adv_details))\n\t               frappe.msgprint(str(all_paid))\n\t                \n\t               if all_paid==True:\n\t                   adv_entry_doc.status = 'Paid'\n\t                   adv_entry_doc.save()\n\t                   adv_entry_doc.submit()\n\t           \n\t            elif adv_entry_advance_type=='In Installments':\n\t                adv_entry_doc = frappe.get_doc('Additional Payment', adv_entry)\n\t                \n\t                adv_details = frappe.get_all(\"Additional Salary\", filters={\"custom_additional_payment\": adv_entry}, fields=['custom_status'])\n\t                all_paid = all(data.custom_status == 'Paid' for data in adv_details)\n\t                \n\t                if all_paid==True:\n\t                    adv_entry_doc.status = 'Paid'\n\t                    adv_entry_doc.save()\n\t                    adv_entry_doc.submit()\n\t                    \n\t                for data in adv_entry_doc.installment_details:\n\t                    if data.date == payroll_date and data.amount != 0:\n\t                        adv_install_nm = data.name\n\t                        \n\t                        frappe.db.set_value('Advance Installment', adv_install_nm, 'is_paid', 1)\n\t                        \n\t        # For Penalty, Canteen Deduction, Other Deduction         \n\t        else:\n\t            frappe.db.set_value('Additional Payment',adv_entry, 'status', 'Paid');\n\t            frappe.db.set_value('Additional Payment',adv_entry, 'paid_from_staff', sal_slip_nm);\n    \n\n\n\n\t            \n\t            \n\t     ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Cancel",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.663717",
  "module": "Khetan HR",
  "name": "Set status 'Unpaid' in additional salary when salary slip is cancelled",
  "reference_doctype": "Salary Slip",
  "script": "sal_slip_doc = frappe.get_doc(\"Salary Slip\", doc.name)\nsal_deduction = sal_slip_doc.get(\"deductions\")\n\n\n\nfor sal_ded in sal_deduction:\n    nm = sal_ded.name\n    sal_component = sal_ded.salary_component\n    amount = sal_ded.amount\n    com_type = sal_ded.custom_type\n    ear_com_type = sal_ded.custom_earning_component_type\n    ded_com_type = sal_ded.custom_deduction_component_type\n    addi_salary = sal_ded.additional_salary\n\n\n    payroll_date = frappe.db.get_value('Additional Salary', addi_salary, 'payroll_date')\n    \n    adv_entry = frappe.db.get_value('Additional Salary', addi_salary, 'custom_additional_payment')\n    adv_entry_type = frappe.db.get_value('Additional Payment', adv_entry, 'type')\n    adv_entry_advance_type = frappe.db.get_value('Additional Payment', adv_entry, 'advance_type')\n    \n    if addi_salary:\n\t    frappe.db.set_value('Additional Salary',addi_salary, 'custom_status', 'Unpaid')\n\t    \n\t    if adv_entry:\n\t        # For Advance\n\t        if adv_entry_type=='Advance':\n\t            \n\t            if adv_entry_advance_type=='In Full Amount':\n\t                frappe.db.set_value('Additional Payment',adv_entry, 'status', 'Unpaid')\n\t                frappe.db.set_value('Additional Payment',adv_entry, 'paid_from_staff', '');\n\t                \n\t            elif adv_entry_type=='In Installments':\n\t                adv_entry_doc = frappe.get_doc('Additional Payment', adv_entry)\n\t                \n\t                for data in adv_entry_doc.installment_details:\n\t                    if data.date == payroll_date:\n\t                        adv_install_nm = data.name\n\t                        \n\t                        frappe.db.set_value('Advance Installment', adv_install_nm, 'is_paid', 0)\n\t                        frappe.db.set_value('Additional Payment', adv_entry, 'status', 'Unpaid')\n\t                        \n\t        # For  Penalty, Canteen Deduction, Other Deduction\n\t        else:\n\t            frappe.db.set_value('Additional Payment',adv_entry, 'status', 'Unpaid');\n\t            frappe.db.set_value('Additional Payment',adv_entry, 'paid_from_staff', '');\n\n\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.680138",
  "module": "Khetan HR",
  "name": "Set Component Type in Salary Slip",
  "reference_doctype": "Salary Slip",
  "script": "# Set Types in Salary Slip\nsal_nm = doc.name\nsal_st_nm = doc.salary_structure\nstart_date = doc.start_date\nend_date = doc.end_date\nemp = doc.employee\n\nsal_doc = frappe.get_doc(\"Salary Slip\",sal_nm)\nsal_earning = sal_doc.get(\"earnings\")\nsal_deduction = sal_doc.get(\"deductions\")\n\n\n# Set type in Earning Table\nfor sal_ear in sal_earning:\n    ear_child_nm = sal_ear.name\n    ear_com_nm = sal_ear.salary_component\n\n    sal_com_type = frappe.db.get_value('Salary Component', ear_com_nm, 'type')\n    ear_com_type = frappe.db.get_value('Salary Component', ear_com_nm, 'custom_earning_component_type')\n    \n    frappe.db.set_value('Salary Detail', ear_child_nm, 'custom_type', sal_com_type)\n    frappe.db.set_value('Salary Detail', ear_child_nm, 'custom_earning_component_type', ear_com_type)\n\n\n\n\n\n# Set type in Deduction Table\nfor sal_ded in sal_deduction:\n    ded_child_nm = sal_ded.name\n    ded_com_nm = sal_ded.salary_component\n    \n    sal_com_type = frappe.db.get_value('Salary Component', ded_com_nm, 'type')\n    ded_com_type = frappe.db.get_value('Salary Component', ded_com_nm, 'component_type')\n    \n    frappe.db.set_value('Salary Detail', ded_child_nm, 'custom_type', sal_com_type)\n    frappe.db.set_value('Salary Detail', ded_child_nm, 'custom_deduction_component_type', ded_com_type)\n\n\n\n\n\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "fetch_labour_salary",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.381933",
  "module": "Khetan HR",
  "name": "Fetch labour salary details",
  "reference_doctype": "Employee Checkin",
  "script": "def round_to_nearest_hour(daily_hours):\n    rounded_hour = 0\n    if daily_hours:\n        hour = int(daily_hours.split('.')[0])\n        minute = int(daily_hours.split('.')[1])\n        \n        if 0 <= minute < 30:\n            rounded_hour = hour\n        elif 30 <= minute <= 60:\n            rounded_hour = hour+1\n\n    return rounded_hour\n\n        \n\n\n\n\n\nname = frappe.form_dict[\"name\"]\nfrom_date = frappe.form_dict[\"from_date\"]\nto_date = frappe.form_dict[\"to_date\"]\n  \nfirst_day_current_month = frappe.utils.get_first_day(from_date)\nlast_day_previous_month = frappe.utils.add_days(first_day_current_month, -1)\nfirst_day_previous_month = frappe.utils.get_first_day(last_day_previous_month)\n  \n    \nif \"company\" in frappe.form_dict:\n    company = frappe.form_dict[\"company\"]\nelse:\n    company = None\n\nif \"employee_type\" in frappe.form_dict:\n    emp_type = frappe.form_dict[\"employee_type\"]\nelse:\n    emp_type = None\n\nif \"department\" in frappe.form_dict:\n    depart = frappe.form_dict[\"department\"]\nelse:\n    depart = None\n\n# Make sure all the necessary variables are defined before proceeding\nif company and ((emp_type and depart) or emp_type or depart):\n    \n    filters = {\n        \"status\": 'Active',\n        \"company\": company\n    }\n    \n    if emp_type:\n        filters[\"employee_type\"] = emp_type\n    if depart:\n        filters[\"department\"] = depart\n    \n    \n    # Fetch Employee details\n    emp_details = frappe.db.get_all(\n        \"Employee\",\n        filters=filters,\n        fields=[\"name\", \"employee_name\", \"department\", \"designation\", \"employee_type\", \"daily_rate\",\"custom_standard_shift_hours\"]\n    )\n    \n    # emp_names = [emp['name'] for emp in emp_details]\n    \n    \n    \n\n\n    #Creating Dictionary\n    employee_dict = {}\n\n    for emp in emp_details:\n       \n        emp_id = emp.get(\"name\")\n        emp_nm = emp.get(\"employee_name\")\n        department = emp.get(\"department\")\n        designation = emp.get(\"designation\")\n        employee_type = emp.get(\"employee_type\")\n        daily_rate = emp.get(\"daily_rate\")\n        shift_hours = emp.get(\"custom_standard_shift_hours\")\n        \n        \n        # Push employee details in dictionary\n        if emp_id not in employee_dict:\n            employee_dict[emp_id] = {\n                \"employee_name\": emp_nm,\n                \"department\": department,\n                \"designation\": designation,\n                \"employee_type\": employee_type,\n                \"daily_rate\": daily_rate,\n                \"standard_shift_hours\":shift_hours,\n                \"total_hours\":0,\n                \"total_payment\":0,\n                \"total_advance\": 0,\n                \"advance_names\":\"\",\n                \"total_penalty\":0,\n                \"penalty_names\":\"\",\n                \"total_canteen\":0,\n                \"canteen_names\":\"\",\n                \"prev_bal\":0,\n                \"net_pay\":0\n            }\n        \n        \n        \n        \n        \n        \n        #Retrieve total hours between selected dates\n        atte_details = frappe.get_all(\n            \"Attendance\",\n            filters={\n                \"docstatus\": 1,\n                \"employee\": emp_id,\n                \"attendance_date\": ['between', [from_date, to_date]]\n                \n            },\n            fields=[\"name\", \"employee\", \"custom_total_hours\"]\n        )\n        \n      \n        for detail in atte_details:\n            employee_id = detail[\"employee\"]\n            daily_hours = detail[\"custom_total_hours\"]\n          \n            \n            formatted_hour = round_to_nearest_hour(daily_hours)\n            \n            hour_rate = employee_dict[employee_id][\"daily_rate\"] / employee_dict[employee_id][\"standard_shift_hours\"]\n            \n            employee_dict[employee_id][\"total_hours\"] = employee_dict[employee_id][\"total_hours\"] + formatted_hour\n            \n            employee_dict[employee_id][\"total_payment\"] = hour_rate * employee_dict[employee_id][\"total_hours\"]\n           \n           \n           \n          \n        \n\n     \n         # Fetch Advance, Penalty, Canteen deduction Details\n        adv_details = frappe.get_all(\n            \"Additional Salary\",\n            filters={\n                \"docstatus\": 1,\n                \"custom_status\": \"Unpaid\",\n                \"employee\": emp_id,\n                \"custom_employee_type\": emp_type,\n                \"payroll_date\": ['between', [from_date, to_date]]\n            },\n            fields=[\"name\", \"custom_posting_date\", \"employee\",\"custom_payment_type\", \"salary_component\", \"amount\"]\n        )\n        \n        adv_name_set = set()\n        penalty_name_set = set()\n        canteen_name_set = set()\n        \n        tot_adv = 0\n        tot_penalty = 0\n        tot_canteen = 0\n        pay_type = None\n        \n        for detail in adv_details:\n            addi_sal_name = detail[\"name\"]\n            employee_id = detail[\"employee\"]\n            pay_type = detail[\"custom_payment_type\"]\n            sal_com = detail[\"salary_component\"]\n            amount = detail[\"amount\"]\n            \n            \n            if pay_type=='Advance':\n                tot_adv = tot_adv + amount\n                employee_dict[employee_id][\"total_advance\"] = tot_adv\n                \n                adv_name_set.add(addi_sal_name)\n            \n            elif pay_type==\"Penalty\":\n                tot_penalty = tot_penalty + amount\n                employee_dict[employee_id][\"total_penalty\"] = tot_penalty\n                \n                penalty_name_set.add(addi_sal_name)\n                \n            elif pay_type==\"Canteen Deduction\":\n                tot_canteen = tot_canteen + amount\n                employee_dict[employee_id][\"total_canteen\"] = tot_canteen\n                \n                canteen_name_set.add(addi_sal_name)\n\n        adv_name_list = list(adv_name_set)\n        penalty_name_list = list(penalty_name_set)\n        canteen_name_list = list(canteen_name_set)\n        \n        adv_names = \"\"\n        penalty_names = \"\"\n        canteen_names = \"\"\n        \n        \n        for i, name in enumerate(adv_name_list, 1):\n            if i > 1:\n                adv_names = adv_names + \", \"\n            adv_names = adv_names + str(name)\n        employee_dict[emp_id][\"advance_names\"] = adv_names\n     \n        for i, name in enumerate(penalty_name_list, 1):\n            if i > 1:\n                penalty_names = penalty_names + \", \"\n            penalty_names = penalty_names + str(name)\n        employee_dict[emp_id][\"penalty_names\"] = penalty_names\n        \n        for i, name in enumerate(canteen_name_list, 1):\n            if i > 1:\n                canteen_names = canteen_names + \", \"\n            canteen_names = canteen_names + str(name)\n        employee_dict[emp_id][\"canteen_names\"] = canteen_names\n\n        \n\n        \n        \n        \n        \n        pre_month_sal = frappe.db.get_value(\n                        'Labour Salary Payment', \n                            filters={\n                                'docstatus': 1, \n                                'employee_type': emp_type, \n                                'from_date': ['between', [first_day_previous_month, last_day_previous_month]],\n                                'to_date': ['between', [first_day_previous_month, last_day_previous_month]]\n                            }, \n                            fieldname = ['name'],\n                            )\n        \n        if pre_month_sal:\n            pre_sal_doc = frappe.get_doc('Labour Salary Payment', pre_month_sal)\n            pay_details = pre_sal_doc.get('payment_details')\n            \n            for detail in pay_details:\n                if emp_id == detail.employee:\n                    employee_dict[emp_id][\"prev_bal\"] = detail.remaining_balance\n                    employee_dict[emp_id][\"prev_bal\"]\n                    \n                    \n                    \n                    \n\n        ###### Calculate Net Pay\n        \n        employee_dict[emp_id][\"net_pay\"] = (\n                                employee_dict[emp_id][\"total_payment\"]\n                                - employee_dict[emp_id][\"total_advance\"]\n                                - employee_dict[emp_id][\"total_penalty\"]\n                                - employee_dict[emp_id][\"total_canteen\"]\n                                - employee_dict[emp_id][\"prev_bal\"]\n                            )\n        \n        \n       \n            \n            \n    \n       \n       \n       \n\n     \n# for key, value in employee_dict.items():\n#     frappe.msgprint(f\"Employee: {key}\")\n#     frappe.msgprint(f\"Employee Name: {value['employee_name']}\")\n#     frappe.msgprint(f\"Department: {value['department']}\")\n#     frappe.msgprint(f\"Designation: {value['designation']}\")\n#     frappe.msgprint(f\"Employee Type: {value['employee_type']}\")\n#     frappe.msgprint(f\"Daily Rate: {value['daily_rate']}\")\n#     frappe.msgprint(f\"Total Hours: {value['total_hours']}\")\n#     frappe.msgprint(f\"Total Payment: {value['total_payment']}\")\n#     frappe.msgprint(f\"Total Advance: {value['total_advance']}\")\n#     frappe.msgprint(f\"Advance Names: {value['advance_names']}\")\n#     frappe.msgprint(f\"Total Penalty: {value['total_penalty']}\")\n#     frappe.msgprint(f\"Penalty Names: {value['penalty_names']}\")\n#     frappe.msgprint(f\"Total Canteen: {value['total_canteen']}\")\n#     frappe.msgprint(f\"Cante Names: {value['canteen_names']}\")\n\n    # frappe.response[\"emp_id\"] = key\n    # frappe.response[\"emp_name\"] = value['employee_name']\n    # frappe.response[\"department\"] = value['department']\n    # frappe.response[\"designation\"] = value['designation']\n    # frappe.response[\"emp_type\"] = value['employee_type']\n    # frappe.response[\"daily_rate\"] = value['daily_rate']\n    # frappe.response[\"total_hours\"] = value['total_hours']\n    # frappe.response[\"total_payment\"] = value['total_payment']\n    # frappe.response[\"total_advance\"] = value['total_advance']\n    # frappe.response[\"advance_names\"] = value['advance_names']\n    # frappe.response[\"total_penalty\"] = value['total_penalty']\n    # frappe.response[\"penalty_names\"] = value['penalty_names']\n    # frappe.response[\"total_canteen\"] = value['total_canteen']\n    # frappe.response[\"canteen_names\"] = value['canteen_names']\n    \n   \n\nfrappe.response[\"message\"] = employee_dict\n  \n    ",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Submit",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.589295",
  "module": "Khetan HR",
  "name": "Validate Labour Salary Payment Process",
  "reference_doctype": "Labour Salary Payment",
  "script": "current_doc = frappe.get_doc('Labour Salary Payment', doc.name)\n\npay_details = current_doc.get('payment_details')\n\nfor detail in pay_details:\n    emp = detail.employee\n    emp_name = detail.employee_name\n\n    exists_lab_sal = frappe.get_all(\n        \"Labour Salary Payment\",\n        filters={\n            \"from_date\": [\"<=\", doc.to_date], \n            \"to_date\": [\">=\", doc.from_date],\n            \"docstatus\": 1\n        },\n        fields=['name']\n    )\n\n    for sal in exists_lab_sal:\n        exists_lab_nm = sal['name']\n        exists_lab_link = frappe.utils.get_link_to_form('Labour Salary Payment',exists_lab_nm)\n        exists_doc = frappe.get_doc('Labour Salary Payment', exists_lab_nm)\n        exists_pay_details = exists_doc.get('payment_details')\n        \n        for data in exists_pay_details:\n            exists_emp = data.employee\n\n            if emp == exists_emp:\n                frappe.throw(f\"Salary of Employee {emp}: {emp_name} has already proceed before: {exists_lab_link}\")",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-06-03 13:39:45.443144",
  "module": "Khetan HR",
  "name": "Update Additional salary details based on Labour salary payment",
  "reference_doctype": "Labour Salary Payment",
  "script": "\ndef fetch_additional_salary_data(current_doc, form, total_advance_value, total_advance_payable, emp):\n    addi_sal_adv = frappe.db.get_value('Additional Salary', form, 'amount')\n    advance_com = frappe.db.get_value('Additional Salary', form, 'salary_component')\n    addi_sal_date = frappe.db.get_value('Additional Salary', form, 'custom_posting_date')\n    addi_pay = frappe.db.get_value('Additional Salary', form, 'custom_additional_payment')\n    addi_pay_tot_amount = frappe.db.get_value('Additional Payment', addi_pay, 'advance_amount')\n    addi_pay_installment = frappe.db.get_value('Additional Payment', addi_pay, 'installment_amount')\n    addi_pay_adv_type = frappe.db.get_value('Additional Payment', addi_pay, 'advance_type')\n    \n    \n    # If totral advance is equal to payable advance from Additional Salary\n    if total_advance_value == total_advance_payable:\n        frappe.db.set_value('Additional Salary', form, 'custom_status', 'Paid')\n        \n        if addi_pay_adv_type == 'In Full Amount':\n            frappe.db.set_value('Additional Payment', addi_pay, 'status', 'Paid')\n        elif addi_pay_adv_type == 'In Installments':\n            addi_pay_doc = frappe.get_doc('Additional Payment', addi_pay)\n            addi_install_child = addi_pay_doc.get(\"installment_details\")\n    \n            for index, add_child in enumerate(addi_install_child):\n                if add_child.date == addi_sal_date:\n                    add_child.installment_amount = total_advance_value\n                    add_child.is_paid = 1\n    \n            addi_pay_doc.save()\n            addi_pay_doc.submit()\n    \n            adv_details = frappe.get_all(\"Additional Salary\", filters={\"custom_additional_payment\": addi_pay}, fields=['custom_status'])\n            all_paid = all(data.custom_status == 'Paid' for data in adv_details)\n    \n            if all_paid:\n                addi_pay_doc.status = 'Paid'\n                addi_pay_doc.save()\n                addi_pay_doc.submit()\n    \n    \n    elif total_advance_value < total_advance_payable:\n        frappe.db.set_value('Additional Salary', form, 'amount', total_advance_value)\n        frappe.db.set_value('Additional Salary', form, 'custom_status', 'Paid')\n    \n        next_month = frappe.utils.add_months(addi_sal_date, 1)\n        next_month_start = frappe.utils.get_first_day(next_month)\n    \n        if addi_pay_adv_type == 'In Full Amount':\n            remaining_advance = total_advance_payable - total_advance_value\n    \n            addi_salary = frappe.get_doc({\n                \"doctype\": \"Additional Salary\",\n                \"custom_posting_date\": next_month_start,\n                \"payroll_date\": next_month_start,\n                \"employee\": emp,\n                \"salary_component\": advance_com,\n                \"amount\": remaining_advance,\n                \"overwrite_salary_structure_amount\": 0,\n                \"custom_additional_payment\": addi_pay,\n                'custom_status': 'Unpaid'\n            })\n            addi_salary.insert(ignore_permissions=True)\n            addi_salary.submit()\n    \n        elif addi_pay_adv_type == 'In Installments':\n            addi_pay_doc = frappe.get_doc('Additional Payment', addi_pay)\n            addi_install_child = addi_pay_doc.get(\"installment_details\")\n        \n            # Mark current month's installment as paid, or add a new record if not found\n            found = False\n            for add_child in addi_install_child:\n                if add_child.date == addi_sal_date:\n                    add_child.installment_amount = total_advance_value\n                    add_child.is_paid = 1\n                    found = True\n            \n            if not found:\n                # Add a new record for the current month's installment\n                addi_pay_doc.append(\"installment_details\", {\n                    'date': addi_sal_date,\n                    'installment_amount': total_advance_value,\n                    'is_paid': 1\n                })\n        \n            addi_pay_doc.save()\n            addi_pay_doc.submit()\n        \n            # Calculate remaining amount\n            paid_amounts = sum(child.installment_amount for child in addi_install_child if child.is_paid)\n            remaining_amount = addi_pay_tot_amount - paid_amounts\n        \n            # Determine new installments\n            installments = []\n            while remaining_amount > 0:\n                if remaining_amount >= addi_pay_installment:\n                    installments.append(addi_pay_installment)\n                    remaining_amount = remaining_amount - addi_pay_installment\n                else:\n                    installments.append(remaining_amount)\n                    remaining_amount = 0\n        \n            # Fetch future additional salary records\n            next_month_addi_sal = frappe.get_all(\n                \"Additional Salary\",\n                filters={\n                    'employee': emp,\n                    'custom_status': 'Unpaid',\n                    'custom_posting_date': ['>', addi_sal_date],\n                    'custom_payment_type': 'Advance'\n                },\n                fields=['name', 'amount', 'custom_posting_date', 'custom_additional_payment', 'salary_component'],\n                order_by='custom_posting_date'\n            )\n        \n            # Map of custom_posting_date to Additional Salary record\n            next_month_addi_sal_map = {sal.custom_posting_date: sal for sal in next_month_addi_sal}\n        \n            # Create or update additional salary records based on new installments\n            for i, installment in enumerate(installments):\n                posting_date = frappe.utils.add_months(next_month_start, i)\n                if posting_date in next_month_addi_sal_map:\n                    # Update existing record\n                    additional_salary = frappe.get_doc(\"Additional Salary\", next_month_addi_sal_map[posting_date].name)\n                    additional_salary.amount = installment\n                    additional_salary.save(ignore_permissions=True)\n                    additional_salary.submit()\n                else:\n                    # Create new record\n                    addi_salary = frappe.get_doc({\n                        \"doctype\": \"Additional Salary\",\n                        \"custom_posting_date\": posting_date,\n                        \"payroll_date\": posting_date,\n                        \"employee\": emp,\n                        \"salary_component\": advance_com,\n                        \"amount\": installment,\n                        \"overwrite_salary_structure_amount\": 0,\n                        \"custom_additional_payment\": addi_pay,\n                        'custom_status': 'Unpaid'\n                    })\n                    addi_salary.insert(ignore_permissions=True)\n                    addi_salary.submit()\n                \n                # Add or update installment detail for the next month\n                next_child_found = False\n                for add_child in addi_install_child:\n                    if add_child.date == posting_date:\n                        add_child.installment_amount = installment\n                        add_child.is_paid = 0\n                        next_child_found = True\n        \n                if not next_child_found:\n                    addi_pay_doc.append(\"installment_details\", {\n                        'date': posting_date,\n                        'installment_amount': installment,\n                        'is_paid': 0\n                    })\n        \n                addi_pay_doc.save()\n                addi_pay_doc.submit()\n        \n            # Check if all installments are paid\n            adv_details = frappe.get_all(\"Additional Salary\", filters={\"custom_additional_payment\": addi_pay}, fields=['custom_status'])\n            all_paid = all(data.custom_status == 'Paid' for data in adv_details)\n        \n            if all_paid:\n                addi_pay_doc.status = 'Paid'\n                addi_pay_doc.save()\n                addi_pay_doc.submit()\n\n    \n                    \n    elif total_advance_value > total_advance_payable:\n        frappe.db.set_value('Additional Salary', form, 'amount', total_advance_value)\n        frappe.db.set_value('Additional Salary', form, 'custom_status', 'Paid')\n    \n        if addi_pay_adv_type == 'In Full Amount':\n            frappe.db.set_value('Additional Payment', addi_pay, 'status', 'Paid')\n        elif addi_pay_adv_type == 'In Installments':\n            addi_pay_doc = frappe.get_doc('Additional Payment', addi_pay)\n            addi_install_child = addi_pay_doc.get(\"installment_details\")\n    \n            for index, add_child in enumerate(addi_install_child):\n                if add_child.date == addi_sal_date:\n                    add_child.installment_amount = total_advance_value\n                    add_child.is_paid = 1\n    \n            addi_pay_doc.save()\n            addi_pay_doc.submit()\n    \n            adv_details = frappe.get_all(\"Additional Salary\", filters={\"custom_additional_payment\": addi_pay}, fields=['custom_status', 'amount'])\n            all_paid = all(data.custom_status == 'Paid' for data in adv_details)\n            total_paid_amount = sum(salary['amount'] for salary in adv_details)\n    \n            if all_paid:\n                addi_pay_doc.status = 'Paid'\n                addi_pay_doc.save()\n                addi_pay_doc.submit()\n    \n            paid_amounts = sum(child.installment_amount for child in addi_install_child if child.is_paid)\n            remaining_amount = addi_pay_tot_amount - paid_amounts\n    \n            installments = []\n            while remaining_amount > 0:\n                if remaining_amount >= addi_pay_installment:\n                    installments.append(addi_pay_installment)\n                    remaining_amount = remaining_amount - addi_pay_installment\n                else:\n                    installments.append(remaining_amount)\n                    remaining_amount = 0\n    \n            next_addi_sal_nm_count = len(installments)\n            next_month_addi_sal = frappe.get_all(\n                \"Additional Salary\",\n                filters={\n                    'employee': emp,\n                    'custom_status': 'Unpaid',\n                    'custom_posting_date': ['>', current_doc.to_date],\n                    'custom_payment_type': 'Advance'\n                },\n                fields=['name', 'amount', 'custom_posting_date', 'custom_additional_payment', 'salary_component'],\n                order_by='name'\n            )\n    \n            processed_records = []\n            for data, installment in zip(next_month_addi_sal, installments):\n                next_addi_sal_nm = data.name\n                next_addi_sal_date = data.custom_posting_date\n    \n                frappe.db.set_value('Additional Salary', next_addi_sal_nm, 'amount', installment)\n                # frappe.msgprint(f\"{next_addi_sal_nm} updated with Installment amount: {installment}\")\n                processed_records.append(next_addi_sal_nm)\n    \n                for add_child in addi_install_child:\n                    if add_child.date == next_addi_sal_date:\n                        add_child.installment_amount = installment\n                        add_child.is_paid = 0\n    \n                addi_pay_doc.save()\n                addi_pay_doc.submit()\n    \n                paid_amounts = sum(child.installment_amount for child in addi_install_child if child.is_paid)\n    \n                adv_details = frappe.get_all(\"Additional Salary\", filters={\"custom_additional_payment\": addi_pay}, fields=['custom_status'])\n                all_paid = all(data.custom_status == 'Paid' for data in adv_details)\n    \n                if all_paid:\n                    addi_pay_doc.status = 'Paid'\n                    addi_pay_doc.save()\n                    addi_pay_doc.submit()\n    \n                next_addi_sal_nm_count = next_addi_sal_nm_count - 1\n                if next_addi_sal_nm_count <= 0:\n                    break\n    \n            unprocessed_records = []\n            for data in next_month_addi_sal:\n                if data.name not in processed_records:\n                    unprocessed_records.append(data.name)\n            \n                    # Cancel the additional salary record before deleting it\n                    additional_salary_doc = frappe.get_doc('Additional Salary', data.name)\n                    if additional_salary_doc.docstatus == 1:\n                        additional_salary_doc.cancel()\n                        # frappe.msgprint(f\"{data.name} has been cancelled.\")\n            \n                    # Delete related installment child records\n                    for add_child in addi_install_child:\n                        if add_child.date == data.custom_posting_date:\n                            addi_pay_doc.remove(add_child)\n            \n                    # Delete the additional salary record\n                    frappe.delete_doc('Additional Salary', data.name)\n                    # frappe.msgprint(f\"{data.name} has been deleted as it was not processed.\")\n            \n                    addi_pay_doc.save()\n                    addi_pay_doc.submit()\n            \n                    adv_details = frappe.get_all(\"Additional Salary\", filters={\"custom_additional_payment\": addi_pay}, fields=['custom_status'])\n                    all_paid = all(data.custom_status == 'Paid' for data in adv_details)\n            \n                    if all_paid:\n                        addi_pay_doc.status = 'Paid'\n                        addi_pay_doc.save()\n                        addi_pay_doc.submit()\n\n\n\n\n\n                    \n                    \n         \n         \n         \n         \n            \n\n\ncurrent_doc = frappe.get_doc('Labour Salary Payment', doc.name)\n\npay_details = current_doc.get('payment_details')\n\ntotal_advance_payable = 0\nfor detail in pay_details:\n    emp = detail.employee\n    total_advance_value = detail.advance\n    adv_form = detail.custom_advance_form\n    can_ded = detail.canteen_deduction\n    can_form = detail.custom_canteen_form\n    fine = detail.fine\n    fine_form =detail.custom_fine_form\n    \n    if total_advance_value>=0 and adv_form:\n        adv_forms = adv_form.split(', ')\n        for form in adv_forms[::-1]:\n            addi_sal_adv = frappe.db.get_value('Additional Salary', form, 'amount')\n            if addi_sal_adv:\n                total_advance_payable = total_advance_payable + addi_sal_adv\n                fetch_additional_salary_data(current_doc,form,total_advance_value,total_advance_payable,emp)\n            \n\n  \n        if total_advance_value < 0:\n            # frappe.msgprint(\"Total advance value exhausted.\")\n            break\n        \n    if can_ded>=0 and can_form:\n        can_forms = can_form.split(', ')\n        for form in can_forms[::-1]:\n            \n            can_addi_pay = frappe.db.get_value('Additional Salary', form, 'custom_additional_payment')\n            frappe.db.set_value('Additional Salary', form, 'custom_status', 'Paid')\n            frappe.db.set_value('Additional Payment', can_addi_pay, 'status', 'Paid')\n            \n    \n    if fine>=0 and fine_form:\n        fine_forms = fine_form.split(', ')\n        for form in fine_forms[::-1]:\n            \n            fine_addi_pay = frappe.db.get_value('Additional Salary', form, 'custom_additional_payment')\n            frappe.db.set_value('Additional Salary', form, 'custom_status', 'Paid')\n            frappe.db.set_value('Additional Payment', fine_addi_pay, 'status', 'Paid')\n      \n\n\n\n\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.603937",
  "module": "Khetan HR",
  "name": "Generate Additional Salary record after submitting additional payment for office staff",
  "reference_doctype": "Additional Payment",
  "script": "date = doc.posting_date\nemp = doc.employee\nemp_nm = doc.employee_name\nemp_type = doc.employee_type\npay_type = doc.type\namount = doc.amount\nadv_type = doc.advance_type\nadv_amount = doc.advance_amount\ninstall_amount = doc.installment_amount\ninstall_months = doc.installment_months\nstatus = doc.status\n\n\n\ncur_month_first_date = frappe.utils.get_first_day(date)\ncur_month_last_date = frappe.utils.get_last_day(date)\n\n# Fetch Component from Salary Component\npenalty_sal_com = frappe.db.get_all('Salary Component', filters= {'type':'Deduction','component_type': 'Penalty'}, fields= ['name'])\npenalty_com = penalty_sal_com[0]['name'] if penalty_sal_com else None\n\ncanteen_sal_com = frappe.db.get_all('Salary Component', filters= {'type':'Deduction','component_type': 'Canteen Deduction'}, fields= ['name'])\ncanteen_com = canteen_sal_com[0]['name'] if canteen_sal_com else None\n\nadvance_sal_com = frappe.db.get_all('Salary Component', filters= {'type':'Deduction','component_type': 'Advance'}, fields= ['name'])\nadvance_com = advance_sal_com[0]['name'] if advance_sal_com else None\n\notherded_sal_com = frappe.db.get_all('Salary Component', filters= {'type':'Deduction','component_type': 'Other Deduction'}, fields= ['name'])\notherded_com = otherded_sal_com[0]['name'] if otherded_sal_com else None\n\n\n# Get current month salary slip\ncur_month_slip = frappe.db.get_value(\"Salary Slip\", \n                                     filters={'employee': emp,\n                                            'docstatus': 1,\n                                              'start_date': ['<=', date], \n                                              'end_date': ['>=', date]}, \n                                     fieldname='name')\n                                     \nsal_slip_link = frappe.utils.get_link_to_form(\"Salary slip\", cur_month_slip)\n\n\n# Generate Additional Salary Record for Advance\nif pay_type=='Advance' and adv_type=='In Full Amount':\n    \n    # if emp_type=='Plant Labours - SU1':\n    #     exis_adv_entry = frappe.db.get_all('Additional Salary', filters= {\"custom_posting_date\": ['between', [cur_month_first_date, cur_month_last_date]],'custom_payment_type':'Advance','custom_status': 'Unpaid'}, fields= ['name','amount','custom_additional_payment'])\n    #     exists_adv = exis_adv_entry[0]['name'] if exis_adv_entry else None\n    #     exists_adv_amount = exis_adv_entry[0]['amount'] if exis_adv_entry else None\n    #     exists_addi_name = exis_adv_entry[0]['custom_additional_payment'] if exis_adv_entry else None\n        \n    #     new_adv_amount = exists_adv_amount + doc.advance_amount\n        \n    #     if exists_adv!=None:\n    #         frappe.db.set_value('Additional Salary', exists_adv, 'amount', new_adv_amount)\n        \n    # else:\n    addi_salary = frappe.get_doc({\n            \"doctype\":\"Additional Salary\",\n            \"custom_posting_date\": date,\n            \"payroll_date\": date,\n            \"employee\": emp,\n            \"salary_component\": advance_com,\n            \"amount\": adv_amount,\n            \"overwrite_salary_structure_amount\": 0,\n            \"custom_additional_payment\": doc.name,\n            'custom_status': status\n            \n        })\n    addi_salary.insert(ignore_permissions = True)\n    addi_salary.submit()\n   \n   \n   \nelif pay_type=='Advance' and adv_type == 'In Installments':\n    cur_adv_entry = frappe.get_doc(\"Additional Payment\", doc.name)\n    \n    installment_dates_and_amounts = {}\n    \n    if not cur_month_slip:\n        \n        for i in range(install_months):\n            next_month_start = frappe.utils.add_months(date, i)\n            start_date = frappe.utils.get_first_day(next_month_start)\n            \n            # For the first installment, consider the current date\n            if i == 0:\n                installment_dates_and_amounts[date] = install_amount\n            else:\n                installment_dates_and_amounts[start_date] = install_amount\n    \n        \n            \n    else:\n\n        for i in range(1, install_months + 1):  \n            next_month_start = frappe.utils.add_months(date, i)\n            start_date = frappe.utils.get_first_day(next_month_start)\n            \n            installment_dates_and_amounts[start_date] = install_amount\n                \n                \n    for date, install_amount in installment_dates_and_amounts.items():\n        \n        child_doc = frappe.new_doc(\"Advance Installment\")\n        \n        # Set values for fields in the child document\n        child_doc.date = date\n        child_doc.installment_amount = install_amount\n        cur_adv_entry.append('installment_details', child_doc)\n        \n        # if emp_type=='Plant Labours - SU1':\n        #     pass\n        # else:\n        addi_salary = frappe.get_doc({\n        \"doctype\":\"Additional Salary\",\n        \"custom_posting_date\": date,\n        \"payroll_date\": date,\n        \"employee\": emp,\n        \"salary_component\": advance_com,\n        \"amount\": install_amount,\n        \"overwrite_salary_structure_amount\": 0,\n        \"custom_additional_payment\": doc.name,\n        'custom_status': status\n        \n        })\n        \n        addi_salary.insert(ignore_permissions = True)\n        addi_salary.submit()\n        \n        \n    cur_adv_entry.save()\n    doc.reload()\n \n# Generate Additional Salary Record for Penalty    \nelif pay_type=='Penalty':\n    \n    # if emp_type=='Plant Labours - SU1':\n    #     pass\n    # else:\n    addi_salary = frappe.get_doc({\n            \"doctype\":\"Additional Salary\",\n            \"custom_posting_date\": date,\n            \"payroll_date\": date,\n            \"employee\": emp,\n            \"salary_component\": penalty_com,\n            \"amount\": amount,\n            \"overwrite_salary_structure_amount\": 0,\n            \"custom_additional_payment\": doc.name,\n            'custom_status': status\n            \n        })\n    addi_salary.insert(ignore_permissions = True)\n    addi_salary.submit()\n        \n        \n        \n# Generate Additional Salary Record for Canteen Deduction    \nelif pay_type=='Canteen Deduction':\n    \n    # if emp_type=='Plant Labours - SU1':\n    #     pass\n    # else:\n    addi_salary = frappe.get_doc({\n            \"doctype\":\"Additional Salary\",\n            \"custom_posting_date\": date,\n            \"payroll_date\": date,\n            \"employee\": emp,\n            \"salary_component\": canteen_com,\n            \"amount\": amount,\n            \"overwrite_salary_structure_amount\": 0,\n            \"custom_additional_payment\": doc.name,\n            'custom_status': status\n            \n        })\n    addi_salary.insert(ignore_permissions = True)\n    addi_salary.submit()\n        \n\n# Generate Additional Salary Record for Other Deduction    \nelif pay_type=='Other Deduction':\n    \n    # if emp_type=='Plant Labours - SU1':\n    #     pass\n    # else:\n    addi_salary = frappe.get_doc({\n            \"doctype\":\"Additional Salary\",\n            \"custom_posting_date\": date,\n            \"payroll_date\": date,\n            \"employee\": emp,\n            \"salary_component\": otherded_com,\n            \"amount\": amount,\n            \"overwrite_salary_structure_amount\": 0,\n            \"custom_additional_payment\": doc.name,\n            'custom_status': status\n            \n        })\n    addi_salary.insert(ignore_permissions = True)\n    addi_salary.submit()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.624435",
  "module": "Khetan HR",
  "name": "Update payroll date for deleted components in additional salary",
  "reference_doctype": "Salary Slip",
  "script": "sal_slip_nm = doc.name\nsal_slip_doc = frappe.get_doc('Salary Slip', sal_slip_nm)\n\n# Fetch values from 'Deductions' table\nded_coms = sal_slip_doc.get(\"deductions\")\n\nfor ded_com in ded_coms:\n    ded_com_nm = ded_com.salary_component\n    ded_com_ded_type = ded_com.custom_deduction_component_type\n    ded_com_add_sal = ded_com.additional_salary\n    ded_com_amount = ded_com.amount\n    \n\n# Fetch values from 'Deleted Records' table\ndel_comps = sal_slip_doc.get(\"custom_deleted_components\")\nfor del_com in del_comps:\n    del_com_nm = del_com.salary_component\n    del_com_ded_type = del_com.custom_deduction_component_type\n    del_com_add_sal = del_com.additional_salary\n    del_com_amount = del_com.amount\n    \n\n    if del_com_ded_type=='Advance' and del_com_add_sal:\n        old_payroll_date = frappe.db.get_value('Additional Salary', del_com_add_sal, 'payroll_date')\n        addi_sal_amount = frappe.db.get_value('Additional Salary', del_com_add_sal, 'amount')\n        addi_pay_nm = frappe.db.get_value('Additional Salary', del_com_add_sal, 'custom_additional_payment')\n        addi_advance_type = frappe.db.get_value('Additional Payment', addi_pay_nm, 'advance_type')\n        \n        # Get next month's first date\n        old_payroll_datetime = frappe.utils.get_datetime(old_payroll_date)\n        next_month_date = frappe.utils.add_months(old_payroll_datetime, 1)\n        next_month_first_date = frappe.utils.get_first_day(next_month_date)\n        next_month_last_date = frappe.utils.get_last_day(next_month_date)\n        \n        \n        # Set amount as 0 for not paid month advance\n        if del_com_amount == addi_sal_amount:\n            if addi_advance_type=='In Full Amount':\n                frappe.db.set_value('Additional Salary', del_com_add_sal, 'payroll_date', next_month_first_date)\n\n            \n            \n            elif addi_advance_type=='In Installments':\n                frappe.db.set_value('Additional Salary', del_com_add_sal, 'amount', '0')\n                frappe.db.set_value('Additional Salary', del_com_add_sal, 'custom_status', 'Paid')\n                \n                next_month_add_salary = frappe.db.exists('Additional Salary', {'payroll_date': ['between', (next_month_first_date, next_month_last_date)]})\n        \n                if next_month_add_salary:\n                     next_add_sal_doc = frappe.get_doc('Additional Salary', next_month_add_salary)\n                     next_add_sal_doc.amount = next_add_sal_doc.amount + addi_sal_amount\n                     next_add_sal_doc.save()\n                    \n                \n                addi_pay_doc = frappe.get_doc('Additional Payment', addi_pay_nm)\n                addi_install_child = addi_pay_doc.get(\"installment_details\")\n                \n                child_idx = None  # Initializing child index variable\n                amount_added_to_next_row = False\n                \n                # Iterate through existing rows to find the matching date\n                for index, add_child in enumerate(addi_install_child):\n                    if add_child.date == old_payroll_date:\n                        child_idx = add_child.idx\n                        frappe.msgprint(str(child_idx))\n                        \n                        # Set paid amount for matching row\n                        add_child.installment_amount = 0\n                        add_child.is_paid = 1\n                        \n                        next_month_date = frappe.db.get_value('Additional Salary', next_month_add_salary, 'payroll_date')\n                        next_month_found = False\n                        \n                        for i, child in enumerate(addi_install_child[index + 1:]):\n                            if child.date == next_month_date:\n                                child.installment_amount = child.installment_amount + del_com_amount\n                                next_month_found = True\n                                break  # Exit loop once next month's date is found\n                        \n                        if not next_month_found:\n                            new_record = frappe.new_doc('Advance Installment')\n                            new_record.idx = child_idx+1\n                            new_record.date = next_month_first_date\n                            new_record.installment_amount = del_com_amount\n                            addi_install_child.append(new_record)\n                        \n                # Save the document\n                addi_pay_doc.save()\n\n            \n            \n        # Set paid amount for half paid month Advance  \n        else:\n            \n            \n            if addi_advance_type=='In Full Amount':\n                frappe.db.set_value('Additional Salary', del_com_add_sal, 'amount', ded_com_amount)\n                # frappe.db.set_value('Additional Salary', del_com_add_sal, 'payroll_date', next_month_first_date)\n                \n                new_add_salary = frappe.new_doc(\"Additional Salary\")\n                new_add_salary.employee = doc.employee\n                new_add_salary.custom_posting_date = next_month_first_date\n                new_add_salary.payroll_date = next_month_first_date\n                new_add_salary.salary_component = del_com_nm\n                new_add_salary.amount = del_com_amount\n                new_add_salary.overwrite_salary_structure_amount = 0\n                new_add_salary.custom_status = 'Unpaid'\n                new_add_salary.custom_additional_payment = addi_pay_nm\n                new_add_salary.save()\n                new_add_salary.submit()\n            \n            elif addi_advance_type=='In Installments':\n                \n                frappe.db.set_value('Additional Salary', del_com_add_sal, 'amount', ded_com_amount)\n                \n                next_month_add_salary = frappe.db.exists('Additional Salary', {'payroll_date': ['between', (next_month_first_date, next_month_last_date)]})\n                if next_month_add_salary:\n                     next_add_sal_doc = frappe.get_doc('Additional Salary', next_month_add_salary)\n                     next_add_sal_doc.amount = next_add_sal_doc.amount + del_com_amount\n                     next_add_sal_doc.save()\n                     \n                else:\n                    new_add_salary = frappe.new_doc(\"Additional Salary\")\n                    new_add_salary.employee = doc.employee\n                    new_add_salary.custom_posting_date = next_month_first_date\n                    new_add_salary.payroll_date = next_month_first_date\n                    new_add_salary.salary_component = del_com_nm\n                    new_add_salary.amount = del_com_amount\n                    new_add_salary.overwrite_salary_structure_amount = 0\n                    new_add_salary.custom_status = 'Unpaid'\n                    new_add_salary.custom_additional_payment = addi_pay_nm\n                    new_add_salary.save()\n                    new_add_salary.submit()\n                    \n                    \n                addi_pay_doc = frappe.get_doc('Additional Payment', addi_pay_nm)\n                addi_install_child = addi_pay_doc.get(\"installment_details\")\n                \n                # child_idx = None  # Initializing child index variable\n                # amount_added_to_next_row = False\n                \n                # Iterate through existing rows to find the matching date\n                for index, add_child in enumerate(addi_install_child):\n                    if add_child.date == old_payroll_date:\n                        child_idx = add_child.idx\n                        frappe.msgprint(str(child_idx))\n                        \n                        # Set paid amount for matching row\n                        add_child.installment_amount = ded_com_amount\n                        \n                        next_month_date = frappe.db.get_value('Additional Salary', next_month_add_salary, 'payroll_date')\n                        next_month_found = False\n                        \n                        for i, child in enumerate(addi_install_child[index + 1:]):\n                            if child.date == next_month_date:\n                                child.installment_amount = child.installment_amount + del_com_amount\n                                next_month_found = True\n                                break  # Exit loop once next month's date is found\n                        \n                        if not next_month_found:\n                            new_record = frappe.new_doc('Advance Installment')\n                            new_record.idx = child_idx+1\n                            new_record.date = next_month_first_date\n                            new_record.installment_amount = del_com_amount\n                            addi_install_child.append(new_record)\n                           \n                        \n                # Save the document\n                addi_pay_doc.save()\n\n\n                \n# Update status of additional salary and additional payment\nded_coms = sal_slip_doc.get(\"deductions\")\n\nfor ded_com in ded_coms:\n    ded_com_nm = ded_com.salary_component\n    ded_com_ded_type = ded_com.custom_deduction_component_type\n    ded_com_add_sal = ded_com.additional_salary\n    ded_com_amount = ded_com.amount\n    \n    if ded_com_add_sal:\n        if ded_com_ded_type=='Advance':\n            res_add_pay_nm = frappe.db.get_value('Additional Salary', ded_com_add_sal, 'custom_additional_payment')\n            res_adv_type = frappe.db.get_value('Additional Payment', res_add_pay_nm, 'advance_type')\n            \n            res_addi_pay_doc = frappe.get_doc('Additional Payment', res_add_pay_nm)\n            payroll_date = frappe.db.get_value('Additional Salary', ded_com_add_sal, 'payroll_date')\n            \n            if res_adv_type=='In Full Amount':\n                frappe.db.set_value('Additional Salary',ded_com_add_sal, 'custom_status', 'Paid');\n                \n                adv_details = frappe.get_all(\"Additional Salary\", filters={\"custom_additional_payment\": res_add_pay_nm}, fields=['custom_status'])\n                all_paid = all(data.custom_status == 'Paid' for data in adv_details)\n                # frappe.msgprint(str(adv_details))\n                # frappe.msgprint(str(all_paid))\n                \n                if all_paid==True:\n                    res_addi_pay_doc.status = 'Paid'\n                    res_addi_pay_doc.save()\n                    res_addi_pay_doc.submit()\n                    \n            \n            elif res_adv_type=='In Installments':\n                frappe.db.set_value('Additional Salary',ded_com_add_sal, 'custom_status', 'Paid');\n                \n                adv_details = frappe.get_all(\"Additional Salary\", filters={\"custom_additional_payment\": res_add_pay_nm}, fields=['custom_status'])\n                all_paid = all(data.custom_status == 'Paid' for data in adv_details)\n                # frappe.msgprint(str(adv_details))\n                # frappe.msgprint(str(all_paid))\n                \n                if all_paid==True:\n                    res_addi_pay_doc.status = 'Paid'\n                    res_addi_pay_doc.save()\n                    res_addi_pay_doc.submit()\n                    \n                for data in res_addi_pay_doc.installment_details:\n                    if data.date == payroll_date and data.amount != 0:\n                        adv_install_nm = data.name\n                        \n                        frappe.db.set_value('Advance Installment', adv_install_nm, 'is_paid', 1)\n                        \n                        \n        # For Penalty, Canteen Deduction, Other Deduction                  \n        else:\n            res_add_pay_nm = frappe.db.get_value('Additional Salary', ded_com_add_sal, 'custom_additional_payment')\n            \n            frappe.db.set_value('Additional Salary',ded_com_add_sal, 'custom_status', 'Paid');\n            frappe.db.set_value('Additional Payment',res_add_pay_nm, 'status', 'Paid');  \n            \n        \n\n            \n            \n            \n            \n        \n        \n\n          ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save (Submitted Document)",
  "event_frequency": "All",
  "modified": "2024-06-03 07:34:18.173189",
  "module": "Khetan HR",
  "name": "Clear all dues of employee",
  "reference_doctype": "Additional Payment",
  "script": "if doc.clear_dues == 1:\n    addi_sal = frappe.get_all(\"Additional Salary\", filters={\"custom_additional_payment\": doc.name}, fields=['name'])\n    for data in addi_sal:\n        addi_sal_nm = data.name\n        \n        \n        frappe.db.set_value('Additional Salary', addi_sal_nm, 'custom_status', 'Paid')\n    frappe.db.set_value('Additional Payment',doc.name, 'status', 'Paid')\n    doc.reload()\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "event_frequency": "All",
  "modified": "2024-06-03 08:27:42.138119",
  "module": "Khetan HR",
  "name": "Do not allow additional payment save of previous months",
  "reference_doctype": "Additional Payment",
  "script": "date = doc.posting_date\nemp = doc.employee\nemp_nm = doc.employee_name\nemp_type = doc.employee_type\n\nif emp_type in ['Office Staff - SU1', 'Plant Staff - SU1']:\n    cur_month_slip = frappe.db.get_value(\"Salary Slip\", \n                            filters={'employee': emp,\n                                    'docstatus': 1,\n                                    'start_date': ['<=', date],\n                                    'end_date': ['>=', date]},\n                            fieldname='name')\n    \n    if cur_month_slip:\n        sal_slip_link = frappe.utils.get_link_to_form(\"Salary slip\", cur_month_slip)\n        error_message = 'Salary Slip of Employee ' + emp + \": \" + emp_nm + \" is already submitted: \" + sal_slip_link\n        frappe.throw(error_message)\n        \n        \n\nif emp_type=='Plant Labours - SU1':\n    cur_month_labour_sal = frappe.db.get_value(\"Labour Salary Payment\", \n                            filters={'docstatus': 1,\n                                    'from_date': ['<=', date],\n                                    'to_date': ['>=', date]},\n                            fieldname='name')\n    \n    if cur_month_labour_sal:\n        \n        exists_lab_link = frappe.utils.get_link_to_form('Labour Salary Payment',cur_month_labour_sal)\n        exists_doc = frappe.get_doc('Labour Salary Payment', cur_month_labour_sal)\n        exists_pay_details = exists_doc.get('payment_details')\n        \n        for data in exists_pay_details:\n            exists_emp = data.employee\n\n            if emp == emp:\n                error_message = 'Labour Salary of Employee ' + emp + \": \" + emp_nm + \" is already submitted: \" + exists_lab_link\n                frappe.throw(error_message)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n       \n        \n                            \n                            \n                            ",
  "script_type": "DocType Event"
 }
]